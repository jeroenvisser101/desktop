{"version":3,"file":"index.js","sources":["../src/main/lib/util/defaultEnvVars.ts","../src/main/lib/util/UlixeeLogger.ts","../src/main/lib/AccountManager.ts","../src/main/lib/ApiClient.ts","../src/main/lib/ArgonFile.ts","../src/main/lib/DeploymentWatcher.ts","../src/main/lib/PrivateDesktopApiHandler.ts","../src/main/lib/ApiManager.ts","../src/main/lib/util/installDefaultChrome.ts","../src/main/lib/util/loadUrl.ts","../src/main/lib/util/trayPositioner.ts","../src/main/menus/generateContextMenu.ts","../src/main/lib/View.ts","../src/main/lib/ChromeAliveWindow.ts","../src/main/lib/util/windowStateKeeper.ts","../src/main/lib/DesktopWindow.ts","../src/main/menus/generateAppMenu.ts","../src/main/lib/WindowManager.ts","../src/main/lib/Menubar.ts","../src/main/index.ts"],"sourcesContent":["import { app } from 'electron';\n\nprocess.env.RUST_LOG ||= 'info';\nif (app.isPackaged) {\n  process.env.DEBUG = [process.env.DEBUG ?? '', 'ulx:*'].filter(Boolean).join(',');\n  process.env.NODE_DISABLE_COLORS = 'true';\n} else {\n  process.env.DEBUG = [process.env.DEBUG ?? '', 'ulx:*'].filter(Boolean).join(',');\n}\n","import log from 'electron-log';\nimport {\n  ILogEntry,\n  injectLogger,\n  Log,\n  loggerSessionIdNames,\n  translateToPrintable,\n} from '@ulixee/commons/lib/Logger';\nimport { app } from 'electron';\nimport * as Path from 'path';\nimport { inspect } from 'util';\n\nObject.assign(console, log.functions);\n\nexport default class UlixeeLogger extends Log {\n  constructor(module: NodeModule, boundContext?: any) {\n    super(module, boundContext);\n    this.useColors = !app.isPackaged;\n  }\n\n  protected override logToConsole(level: ILogEntry['level'], entry: ILogEntry): void {\n    const printablePath = entry.module\n      .replace('.js', '')\n      .replace('.ts', '')\n      .replace(`build${Path.sep}`, '')\n      .replace(`desktop${Path.sep}packages`, '');\n\n    const { error, printData } = translateToPrintable(entry.data);\n\n    if (level === 'warn' || level === 'error') {\n      printData.sessionId = entry.sessionId;\n      if (entry.sessionId) {\n        printData.sessionName = loggerSessionIdNames.get(entry.sessionId) ?? undefined;\n      }\n    }\n\n    const params = Object.keys(printData).length ? [printData] : [];\n    if (error) params.push(error);\n\n    const args = [\n      `[${printablePath}] ${entry.action}`,\n      ...params.map(x => inspect(x, false, 5, this.useColors)),\n    ];\n    if (level === 'stats') {\n      log.debug(...args);\n    } else {\n      log[level](...args);\n    }\n  }\n\n  static register(): void {\n    injectLogger(module => {\n      return { log: new UlixeeLogger(module) };\n    });\n  }\n}\n\nUlixeeLogger.register();\n","import {\n  BalanceSyncResult,\n  CryptoScheme,\n  Localchain,\n  LocalchainOverview,\n  MainchainClient,\n} from '@argonprotocol/localchain';\nimport EventSubscriber from '@ulixee/commons/lib/EventSubscriber';\nimport Logger from '@ulixee/commons/lib/Logger';\nimport Queue from '@ulixee/commons/lib/Queue';\nimport TypedEventEmitter from '@ulixee/commons/lib/TypedEventEmitter';\nimport Env from '@ulixee/datastore/env';\nimport IDatastoreHostLookup from '@ulixee/datastore/interfaces/IDatastoreHostLookup';\nimport ILocalchainConfig from '@ulixee/datastore/interfaces/ILocalchainConfig';\nimport { IDatabrokerAuthAccount } from '@ulixee/datastore/interfaces/ILocalUserProfile';\nimport { IDatabrokerAccount, IWallet } from '@ulixee/datastore/interfaces/IPaymentService';\nimport DatastoreLookup from '@ulixee/datastore/lib/DatastoreLookup';\nimport LocalUserProfile from '@ulixee/datastore/lib/LocalUserProfile';\nimport BrokerChannelHoldSource from '@ulixee/datastore/payments/BrokerChannelHoldSource';\nimport LocalchainWithSync from '@ulixee/datastore/payments/LocalchainWithSync';\nimport { IArgonFileMeta } from '@ulixee/desktop-interfaces/apis';\nimport {\n  ARGON_FILE_EXTENSION,\n  ArgonFileSchema,\n} from '@ulixee/platform-specification/types/IArgonFile';\nimport ArgonUtils from '@ulixee/platform-utils/lib/ArgonUtils';\nimport Identity from '@ulixee/platform-utils/lib/Identity';\nimport { gettersToObject } from '@ulixee/platform-utils/lib/objectUtils';\nimport serdeJson from '@ulixee/platform-utils/lib/serdeJson';\nimport * as Path from 'path';\nimport { IArgonFile } from './ArgonFile';\n\nconst { log } = Logger(module);\n\nexport default class AccountManager extends TypedEventEmitter<{\n  update: { wallet: IWallet };\n}> {\n  exited = false;\n  events = new EventSubscriber();\n  public localchains: LocalchainWithSync[] = [];\n  public localchainForQuery?: LocalchainWithSync;\n  public localchainForCloudNode?: LocalchainWithSync;\n  private localchainToAddressCache = new WeakMap<LocalchainWithSync, string>();\n  private nextTick?: NodeJS.Timeout;\n  private mainchainClient?: MainchainClient;\n  private queue = new Queue('LOCALCHAIN', 1);\n\n  constructor(readonly localUserProfile: LocalUserProfile) {\n    super();\n  }\n\n  public getDefaultLocalchain(): LocalchainWithSync {\n    return this.localchains.find(x => x.name === 'primary') ?? this.localchains[0];\n  }\n\n  public async loadMainchainClient(url?: string, timeoutMillis?: number): Promise<void> {\n    url ??= Env.argonMainchainUrl;\n    if (url) {\n      try {\n        this.mainchainClient = await MainchainClient.connect(url, timeoutMillis ?? 10e3);\n        for (const localchain of this.localchains) {\n          await localchain.attachMainchain(this.mainchainClient);\n        }\n      } catch (error) {\n        log.error('Could not connect to mainchain', { error });\n        throw error;\n      }\n    }\n  }\n\n  public async start(): Promise<void> {\n    for (const config of this.localUserProfile.localchains) {\n      await this.loadLocalchain({\n        localchainPath: config.path,\n        disableAutomaticSync: true,\n        // TODO: need to prompt for passwords of needed\n        // keystorePassword: config.hasPassword ? { password: Buffer.from(config.password) } : undefined\n      });\n    }\n    if (!this.localUserProfile.localchains.length) {\n      await Promise.all([\n        this.addAccount({ role: 'query' }),\n        this.addAccount({\n          path: Path.join(Localchain.getDefaultDir(), `Cloudnode1.db`),\n          role: 'cloudNode',\n        }),\n      ]);\n    }\n    void this.loadMainchainClient().then(this.emitWallet.bind(this));\n    this.scheduleNextSync();\n  }\n\n  public async close(): Promise<void> {\n    if (this.exited) return;\n    this.exited = true;\n  }\n\n  public async addBrokerAccount(\n    config: Omit<IDatabrokerAuthAccount, 'userIdentity'>,\n  ): Promise<IDatabrokerAccount> {\n    const identity = Identity.loadFromPem(config.pemPath, { keyPassphrase: config.pemPassword });\n    const userIdentity = identity.bech32;\n    Object.assign(config, { userIdentity });\n    // check first and throw error if invalid\n    const balance = await this.getBrokerBalance(config.host, userIdentity);\n    const entry = this.localUserProfile.databrokers.find(x => x.host === config.host);\n    if (entry) {\n      entry.pemPath = config.pemPath;\n      entry.pemPassword = config.pemPassword;\n      entry.userIdentity = userIdentity;\n      entry.name = config.name;\n    } else {\n      this.localUserProfile.databrokers.push(config as IDatabrokerAuthAccount);\n    }\n    await this.localUserProfile.save();\n    return {\n      ...config,\n      userIdentity,\n      balance,\n    };\n  }\n\n  public async getBrokerBalance(host: string, identity: string): Promise<bigint> {\n    return await BrokerChannelHoldSource.getBalance(host, identity);\n  }\n\n  public async getBrokerAccounts(): Promise<IDatabrokerAccount[]> {\n    const brokers = this.localUserProfile.databrokers.map(x => ({ ...x, balance: 0n }));\n    for (const broker of brokers) {\n      broker.balance = await this.getBrokerBalance(broker.host, broker.userIdentity).catch(\n        () => 0n,\n      );\n    }\n    return brokers;\n  }\n\n  public async addAccount(\n    config: {\n      path?: string;\n      password?: string;\n      cryptoScheme?: CryptoScheme;\n      suri?: string;\n      role?: 'query' | 'cloudNode';\n    } = {},\n  ): Promise<LocalchainWithSync> {\n    config ??= {};\n    const password = config.password\n      ? {\n          password: Buffer.from(config.password),\n        }\n      : undefined;\n    const localchain = await this.loadLocalchain({\n      localchainPath: config.path,\n      disableAutomaticSync: true,\n      keystorePassword: password,\n    });\n    if (config.role === 'cloudNode') {\n      this.localUserProfile.localchainForCloudNodeName = localchain.name;\n      this.localchainForCloudNode = localchain;\n    }\n    if (config.role === 'query') {\n      this.localUserProfile.localchainForQueryName = localchain.name;\n      this.localchainForQuery = localchain;\n    }\n\n    let entry = this.localUserProfile.localchains.find(x => x.path === localchain.path);\n    if (!entry) {\n      entry = {\n        path: localchain.path,\n        hasPassword: !!config.password,\n      };\n      this.localUserProfile.localchains.push(entry);\n    }\n    await this.localUserProfile.save();\n\n    if (this.mainchainClient) {\n      await localchain.attachMainchain(this.mainchainClient);\n    }\n    const needsBootstrap = !(await localchain.isCreated());\n    if (needsBootstrap) {\n      await localchain.create(config);\n    }\n    return localchain;\n  }\n\n  private async loadLocalchain(config: ILocalchainConfig): Promise<LocalchainWithSync> {\n    const localchain = await LocalchainWithSync.load(config);\n    this.localchains.push(localchain);\n\n    if (localchain.name === this.localUserProfile.localchainForQueryName) {\n      this.localchainForQuery = localchain;\n    }\n    if (localchain.name === this.localUserProfile.localchainForCloudNodeName) {\n      this.localchainForCloudNode = localchain;\n    }\n    return localchain;\n  }\n\n  private sortLocalchains(): void {\n    this.localchains.sort((a, b) => {\n      if (a.name === 'primary') return -1;\n      if (b.name === 'primary') return 1;\n      if (a.name === this.localUserProfile.localchainForQueryName) return -1;\n      if (b.name === this.localUserProfile.localchainForQueryName) return 1;\n      if (a.name === this.localUserProfile.localchainForCloudNodeName) return -1;\n      if (b.name === this.localUserProfile.localchainForCloudNodeName) return 1;\n      return a.name.localeCompare(b.name);\n    });\n  }\n\n  public async getAddress(localchain: LocalchainWithSync): Promise<string | undefined> {\n    if (!this.localchainToAddressCache.has(localchain)) {\n      this.localchainToAddressCache.set(localchain, await localchain.address);\n    }\n    return this.localchainToAddressCache.get(localchain);\n  }\n\n  public async getLocalchain(address?: string): Promise<LocalchainWithSync | undefined> {\n    if (!address) return;\n    for (const chain of this.localchains) {\n      if ((await this.getAddress(chain)) === address) return chain;\n    }\n  }\n\n  public async getDatastoreHostLookup(): Promise<IDatastoreHostLookup | undefined> {\n    return new DatastoreLookup(this.mainchainClient ? Promise.resolve(this.mainchainClient) : null);\n  }\n\n  public async getWallet(): Promise<IWallet> {\n    const accounts = await Promise.all(this.localchains.map(x => x.accountOverview()));\n    const brokerAccounts = await this.getBrokerAccounts();\n    let balance = 0n;\n    for (const account of accounts) {\n      balance += account.balance + account.mainchainBalance;\n    }\n    for (const account of brokerAccounts) {\n      balance += account.balance;\n    }\n\n    const formattedBalance = ArgonUtils.format(balance, 'milligons', 'argons');\n\n    return {\n      credits: [],\n      brokerAccounts,\n      accounts,\n      formattedBalance,\n      localchainForQuery: this.localUserProfile.localchainForQueryName,\n      localchainForCloudNode: this.localUserProfile.localchainForCloudNodeName,\n    };\n  }\n\n  public async transferMainchainToLocal(address: string, amount: bigint): Promise<void> {\n    const localchain = await this.getLocalchain(address);\n    if (!localchain) throw new Error('No localchain found for address');\n    await localchain.mainchainTransfers.sendToLocalchain(amount);\n  }\n\n  public async transferLocalToMainchain(address: string, amount: bigint): Promise<void> {\n    const localchain = await this.getLocalchain(address);\n    if (!localchain) throw new Error('No localchain found for address');\n    const change = localchain.inner.beginChange();\n    const account = await change.defaultDepositAccount();\n    await account.sendToMainchain(amount);\n    const result = await change.notarize();\n    log.info('Localchain to mainchain transfer notarized', {\n      notarizationTracker: await gettersToObject(result),\n    } as any);\n  }\n\n  public async createAccount(\n    name: string,\n    suri?: string,\n    password?: string,\n  ): Promise<LocalchainOverview> {\n    const path = Path.join(Localchain.getDefaultDir(), `${name}.db`);\n    const localchain = await this.addAccount({ path, suri, password });\n    return await localchain.accountOverview();\n  }\n\n  public async createArgonsToSendFile(request: {\n    milligons: bigint;\n    fromAddress?: string;\n    toAddress?: string;\n  }): Promise<IArgonFileMeta> {\n    const localchain =\n      (await this.getLocalchain(request.fromAddress)) ?? this.getDefaultLocalchain();\n\n    const file = await localchain.transactions.send(\n      request.milligons,\n      request.toAddress ? [request.toAddress] : null,\n    );\n    const argonFile = JSON.parse(file);\n\n    const recipient = request.toAddress ? `for ${request.toAddress}` : 'cash';\n    return {\n      rawJson: file,\n      file: ArgonFileSchema.parse(argonFile),\n      name: `${ArgonUtils.format(request.milligons, 'milligons', 'argons')} ${recipient}.${ARGON_FILE_EXTENSION}`,\n    };\n  }\n\n  public async createArgonsToRequestFile(request: {\n    milligons: bigint;\n    sendToMyAddress?: string;\n  }): Promise<IArgonFileMeta> {\n    const localchain =\n      (await this.getLocalchain(request.sendToMyAddress)) ?? this.getDefaultLocalchain();\n    const file = await localchain.transactions.request(request.milligons);\n    const argonFile = JSON.parse(file);\n\n    return {\n      rawJson: file,\n      file: ArgonFileSchema.parse(argonFile),\n      name: `Argon Request ${new Date().toLocaleString()}`,\n    };\n  }\n\n  public async acceptArgonRequest(\n    argonFile: IArgonFile,\n    fulfillFromAccount?: string,\n  ): Promise<void> {\n    if (!argonFile.request) {\n      throw new Error('This Argon file is not a request');\n    }\n    let fromAddress = fulfillFromAccount;\n    if (!fromAddress) {\n      const funding = argonFile.request.reduce((sum, x) => {\n        if (x.accountType === 'deposit') {\n          for (const note of x.notes) {\n            if (note.noteType.action === 'claim') sum += note.milligons;\n          }\n        }\n        return sum;\n      }, 0n);\n      for (const account of this.localchains) {\n        const overview = await account.accountOverview();\n        if (overview.balance >= funding) {\n          fromAddress = overview.address;\n          break;\n        }\n      }\n    }\n    const localchain = (await this.getLocalchain(fromAddress)) ?? this.getDefaultLocalchain();\n    const argonFileJson = serdeJson(argonFile);\n    await this.queue.run(async () => {\n      const importChange = localchain.inner.beginChange();\n      await importChange.acceptArgonFileRequest(argonFileJson);\n      const result = await importChange.notarize();\n      log.info('Argon request notarized', {\n        notarizationTracker: await gettersToObject(result),\n      } as any);\n    });\n  }\n\n  public async importArgons(argonFile: IArgonFile): Promise<void> {\n    if (!argonFile.send) {\n      throw new Error('This Argon file does not contain any sent argons');\n    }\n\n    const filters = argonFile.send\n      .map(x => {\n        if (x.accountType === 'deposit') {\n          for (const note of x.notes) {\n            if (note.noteType.action === 'send') {\n              return note.noteType.to;\n            }\n          }\n        }\n        return [];\n      })\n      .flat()\n      .filter(Boolean);\n\n    let localchain = this.getDefaultLocalchain();\n    for (const filter of filters) {\n      if (!filter) continue;\n      const lookup = await this.getLocalchain(filter);\n      if (lookup) {\n        localchain = lookup;\n        break;\n      }\n    }\n\n    const argonFileJson = serdeJson(argonFile);\n    await this.queue.run(async () => {\n      const importChange = localchain.inner.beginChange();\n      await importChange.importArgonFile(argonFileJson);\n      const result = await importChange.notarize();\n      log.info('Argon import notarized', {\n        notarizationTracker: await gettersToObject(result),\n      } as any);\n    });\n  }\n\n  private scheduleNextSync(): void {\n    const localchain = this.getDefaultLocalchain();\n    if (!localchain) return;\n    const nextTick = Number(localchain.ticker.millisToNextTick());\n    this.nextTick = setTimeout(() => this.sync().catch(() => null), nextTick + 1);\n  }\n\n  private async sync(): Promise<void> {\n    clearTimeout(this.nextTick);\n    try {\n      const syncs = await Promise.allSettled(\n        this.localchains.map(localchain =>\n          this.queue.run(async () => await localchain.balanceSync.sync()),\n        ),\n      );\n      const result: BalanceSyncResult = {\n        channelHoldNotarizations: [],\n        balanceChanges: [],\n        jumpAccountConsolidations: [],\n        mainchainTransfers: [],\n        blockVotes: [],\n        channelHoldsUpdated: [],\n      };\n      for (let i = 0; i < syncs.length; i++) {\n        const sync = syncs[i];\n        const localchain = this.localchains[i];\n        if (sync.status === 'fulfilled') {\n          const next = sync.value;\n\n          result.channelHoldNotarizations.push(...next.channelHoldNotarizations);\n          result.balanceChanges.push(...next.balanceChanges);\n          result.jumpAccountConsolidations.push(...next.jumpAccountConsolidations);\n          result.mainchainTransfers.push(...next.mainchainTransfers);\n          result.channelHoldsUpdated.push(...next.channelHoldsUpdated);\n        }\n        if (sync.status === 'rejected') {\n          log.warn('Error synching account balance changes', {\n            error: sync.reason,\n            localchain: localchain.name,\n          } as any);\n        }\n      }\n      if (result.mainchainTransfers.length || result.balanceChanges.length) {\n        log.info('Account sync result', {\n          ...(await gettersToObject(result)),\n        } as any);\n        await this.emitWallet();\n      }\n    } catch (error) {\n      log.error('Error synching account balance changes', { error });\n    }\n    this.scheduleNextSync();\n  }\n\n  private async emitWallet(): Promise<void> {\n    const wallet = await this.getWallet();\n    this.emit('update', { wallet });\n  }\n}\n","import { TypedEventEmitter } from '@ulixee/commons/lib/eventUtils';\nimport { toUrl } from '@ulixee/commons/lib/utils';\nimport { IChromeAliveSessionApis, IDesktopAppApis } from '@ulixee/desktop-interfaces/apis';\nimport IChromeAliveSessionEvents from '@ulixee/desktop-interfaces/events/IChromeAliveSessionEvents';\nimport IDesktopAppEvents from '@ulixee/desktop-interfaces/events/IDesktopAppEvents';\nimport ICoreEventPayload from '@ulixee/net/interfaces/ICoreEventPayload';\nimport { ConnectionToCore, WsTransportToCore } from '@ulixee/net';\nimport ICoreRequestPayload from '@ulixee/net/interfaces/ICoreRequestPayload';\nimport ICoreResponsePayload from '@ulixee/net/interfaces/ICoreResponsePayload';\nimport ITransport from '@ulixee/net/interfaces/ITransport';\n\nexport default class ApiClient<\n  TApis extends IDesktopAppApis | IChromeAliveSessionApis,\n  TEvents extends IChromeAliveSessionEvents | IDesktopAppEvents,\n  TEventNames extends keyof TEvents = keyof TEvents,\n> extends TypedEventEmitter<{ close: void }> {\n  public isConnected = false;\n  public address: string;\n  public readonly transport: ITransport;\n  private connection: ConnectionToCore<TApis, TEvents>;\n\n  constructor(\n    address: string,\n    public onEvent: (event: TEventNames, data?: TEvents[TEventNames]) => any,\n  ) {\n    super();\n    try {\n      const url = toUrl(address);\n      url.hostname.replace('localhost', '127.0.0.1');\n      this.address = url.href;\n    } catch (error) {\n      console.error('Invalid API URL', error, { address });\n      throw error;\n    }\n    this.transport = new WsTransportToCore(this.address);\n    this.connection = new ConnectionToCore(this.transport);\n    this.connection.on('event', this.onMessage.bind(this));\n    this.connection.on('disconnected', this.onDisconnected.bind(this));\n  }\n\n  public async connect(): Promise<void> {\n    await this.connection.connect(false, 15e3);\n    this.isConnected = true;\n  }\n\n  public async disconnect(): Promise<void> {\n    this.isConnected = false;\n    await this.connection.disconnect();\n  }\n\n  public async send<T extends keyof TApis & string>(\n    command: T,\n    ...args: ICoreRequestPayload<TApis, T>['args']\n  ): Promise<ICoreResponsePayload<TApis, T>['data']> {\n    return await this.connection.sendRequest({ command, args });\n  }\n\n  private onDisconnected(): void {\n    this.emit('close');\n  }\n\n  private onMessage(message: ICoreEventPayload<TEvents, any> | any): void {\n    if (typeof message === 'string' && message === 'exit') {\n      this.onEvent('App.quit' as any);\n      return;\n    }\n    const apiEvent = message.event;\n    this.onEvent(apiEvent.eventType, apiEvent.data);\n  }\n}\n","import { existsAsync, readFileAsJson } from '@ulixee/commons/lib/fileUtils';\nimport IArgonFile, { ArgonFileSchema } from '@ulixee/platform-specification/types/IArgonFile';\nimport ValidationError from '@ulixee/platform-specification/utils/ValidationError';\nimport * as Fs from 'fs';\n\nexport type { IArgonFile };\nexport default {\n  async create(json: string, file: string): Promise<void> {\n    if (await existsAsync(file)) await Fs.promises.rm(file);\n    await Fs.promises.writeFile(file, json);\n  },\n\n  async readFromPath(path: string): Promise<IArgonFile | null> {\n    const data = await readFileAsJson<IArgonFile>(path).catch(() => null);\n    if (data) {\n      const result = ArgonFileSchema.safeParse(data);\n      if (result.success === false) {\n        throw ValidationError.fromZodValidation(\n          `The Argon file you've just opened has invalid parameters.`,\n          result.error,\n        );\n      }\n      return result.data;\n    }\n    return null;\n  },\n};\n","import * as Fs from 'fs';\nimport * as Path from 'path';\nimport IDatastoreDeployLogEntry from '@ulixee/datastore-core/interfaces/IDatastoreDeployLogEntry';\nimport UlixeeConfig from '@ulixee/commons/config';\nimport { TypedEventEmitter } from '@ulixee/commons/lib/eventUtils';\n\nconst deploymentsFile = Path.join(UlixeeConfig.global.directoryPath, 'datastore-deployments.jsonl');\n\nexport default class DeploymentWatcher extends TypedEventEmitter<{\n  new: IDatastoreDeployLogEntry;\n}> {\n  public deployments: IDatastoreDeployLogEntry[] = [];\n\n  private deploymentFileWatch?: Fs.FSWatcher;\n\n  constructor() {\n    super();\n    void this.checkFile();\n  }\n\n  public start(): void {\n    if (!Fs.existsSync(deploymentsFile)) {\n      if (!Fs.existsSync(UlixeeConfig.global.directoryPath)) {\n        Fs.mkdirSync(UlixeeConfig.global.directoryPath, { recursive: true });\n      }\n      Fs.writeFileSync(deploymentsFile, '');\n    }\n    if (process.platform === 'win32' || process.platform === 'darwin') {\n      this.deploymentFileWatch = Fs.watch(deploymentsFile, { persistent: false }, () => {\n        void this.checkFile();\n      });\n    } else {\n      Fs.watchFile(deploymentsFile, { persistent: false }, (curr, prev) => {\n        if (curr.mtimeMs > prev.mtimeMs) {\n          void this.checkFile();\n        }\n      });\n    }\n  }\n\n  public stop(): void {\n    if (this.deploymentFileWatch) this.deploymentFileWatch?.close();\n    else Fs.unwatchFile(deploymentsFile);\n  }\n\n  private async checkFile(): Promise<void> {\n    try {\n      const data = await Fs.promises.readFile(deploymentsFile, 'utf8');\n      const allRecords: IDatastoreDeployLogEntry[] = data\n        .split(/\\r?\\n/g)\n        .filter(Boolean)\n        .map(x => JSON.parse(x));\n      for (const record of allRecords) {\n        if (\n          this.deployments.some(\n            x => x.cloudHost === record.cloudHost && x.version === record.version,\n          )\n        ) {\n          continue;\n        }\n        this.deployments.push(record);\n        this.emit('new', record);\n      }\n    } catch {}\n  }\n}\n","import { ARGON_FILE_VERSION, LocalchainOverview } from '@argonprotocol/localchain';\nimport { getDataDirectory } from '@ulixee/commons/lib/dirUtils';\nimport EventSubscriber from '@ulixee/commons/lib/EventSubscriber';\nimport { TypedEventEmitter } from '@ulixee/commons/lib/eventUtils';\nimport Resolvable from '@ulixee/commons/lib/Resolvable';\nimport IDatastoreDeployLogEntry from '@ulixee/datastore-core/interfaces/IDatastoreDeployLogEntry';\nimport DatastoreManifest from '@ulixee/datastore-core/lib/DatastoreManifest';\nimport type ILocalUserProfile from '@ulixee/datastore/interfaces/ILocalUserProfile';\nimport { IDatabrokerAuthAccount } from '@ulixee/datastore/interfaces/ILocalUserProfile';\nimport { IDatabrokerAccount, IWallet } from '@ulixee/datastore/interfaces/IPaymentService';\nimport IQueryLogEntry from '@ulixee/datastore/interfaces/IQueryLogEntry';\nimport DatastoreApiClient from '@ulixee/datastore/lib/DatastoreApiClient';\nimport CreditReserver from '@ulixee/datastore/payments/CreditReserver';\nimport {\n  IArgonFileMeta,\n  IDatastoreResultItem,\n  IDesktopAppPrivateApis,\n  TCredit,\n} from '@ulixee/desktop-interfaces/apis';\nimport { ICloudConnected } from '@ulixee/desktop-interfaces/apis/IDesktopApis';\nimport IDesktopAppPrivateEvents from '@ulixee/desktop-interfaces/events/IDesktopAppPrivateEvents';\nimport { ConnectionToClient, WsTransportToClient } from '@ulixee/net';\nimport IConnectionToClient from '@ulixee/net/interfaces/IConnectionToClient';\nimport IArgonFile, {\n  ARGON_FILE_EXTENSION,\n  ArgonFileSchema,\n} from '@ulixee/platform-specification/types/IArgonFile';\nimport ArgonUtils from '@ulixee/platform-utils/lib/ArgonUtils';\nimport Identity from '@ulixee/platform-utils/lib/Identity';\nimport { app, dialog, Menu, WebContents } from 'electron';\nimport { IncomingMessage } from 'http';\nimport { nanoid } from 'nanoid';\nimport * as Os from 'os';\nimport * as Path from 'path';\nimport { types } from 'sass-embedded';\nimport WebSocket from 'ws';\nimport ApiManager from './ApiManager';\nimport ArgonFile from './ArgonFile';\nimport Error = types.Error;\n\nconst argIconPath = Path.resolve(app.getAppPath(), 'resources', 'arg.png');\n\nexport interface IOpenReplay {\n  cloudAddress: string;\n  heroSessionId: string;\n  dbPath: string;\n}\n\nexport default class PrivateDesktopApiHandler extends TypedEventEmitter<{\n  'open-replay': IOpenReplay;\n}> {\n  public Apis: IDesktopAppPrivateApis = {\n    'Argon.importSend': this.importArgons.bind(this),\n    'Argon.acceptRequest': this.acceptArgonRequest.bind(this),\n    'Argon.send': this.createArgonsToSendFile.bind(this),\n    'Argon.request': this.createArgonsToRequestFile.bind(this),\n    'Argon.dropFile': this.onArgonFileDrop.bind(this),\n    'Argon.showFileContextMenu': this.showContextMenu.bind(this),\n    'Argon.transferFromMainchain': this.transferArgonsFromMainchain.bind(this),\n    'Argon.transferToMainchain': this.transferArgonsToMainchain.bind(this),\n    'Credit.create': this.createCredit.bind(this),\n    'Credit.save': this.saveCredit.bind(this),\n    'Cloud.findAdminIdentity': this.findCloudAdminIdentity.bind(this),\n    'Datastore.setAdminIdentity': this.setDatastoreAdminIdentity.bind(this),\n    'Datastore.findAdminIdentity': this.findAdminIdentity.bind(this),\n    'Datastore.getInstalled': this.getInstalledDatastores.bind(this),\n    'Datastore.query': this.queryDatastore.bind(this),\n    'Datastore.deploy': this.deployDatastore.bind(this),\n    'Datastore.install': this.installDatastore.bind(this),\n    'Datastore.uninstall': this.uninstallDatastore.bind(this),\n    'Desktop.getAdminIdentities': this.getAdminIdentities.bind(this),\n    'Desktop.getCloudConnections': this.getCloudConnections.bind(this),\n    'Desktop.connectToPrivateCloud': this.connectToPrivateCloud.bind(this),\n    'GettingStarted.getCompletedSteps': this.gettingStartedProgress.bind(this),\n    'GettingStarted.completeStep': this.completeGettingStartedStep.bind(this),\n    'Session.openReplay': this.openReplay.bind(this),\n    'User.getQueries': this.getQueries.bind(this),\n    'User.getWallet': this.getWallet.bind(this),\n    'User.createAccount': this.createAccount.bind(this),\n    'User.addBrokerAccount': this.addBrokerAccount.bind(this),\n  } as const;\n\n  public Events!: IDesktopAppPrivateEvents;\n\n  private connectionToClient?: IConnectionToClient<this['Apis'], this['Events']>;\n  private waitForConnection = new Resolvable<void>();\n  private events = new EventSubscriber();\n\n  constructor(private readonly apiManager: ApiManager) {\n    super();\n\n    this.events.on(apiManager, 'new-cloud-address', this.onNewCloudAddress.bind(this));\n    this.events.on(apiManager, 'deployment', this.onDeployment.bind(this));\n    this.events.on(apiManager, 'query', this.onQuery.bind(this));\n    this.events.on(apiManager, 'wallet-updated', this.onWalletUpdated.bind(this));\n  }\n\n  public onConnection(ws: WebSocket, req: IncomingMessage): void {\n    if (this.connectionToClient) {\n      void this.connectionToClient.disconnect();\n    }\n    this.waitForConnection.resolve();\n    const transport = new WsTransportToClient(ws, req);\n    this.connectionToClient = new ConnectionToClient(transport, this.Apis);\n    const promise = this.waitForConnection;\n    this.events.once(this.connectionToClient, 'disconnected', () => {\n      if (this.waitForConnection === promise) this.waitForConnection = new Resolvable<void>();\n    });\n  }\n\n  public async close(): Promise<void> {\n    try {\n      await this.connectionToClient?.disconnect();\n    } catch {}\n    this.events.close();\n  }\n\n  public async getWallet(): Promise<IWallet> {\n    return this.apiManager.getWallet();\n  }\n\n  public async completeGettingStartedStep(step: string): Promise<void> {\n    if (!this.apiManager.localUserProfile.gettingStartedCompletedSteps.includes(step)) {\n      this.apiManager.localUserProfile.gettingStartedCompletedSteps.push(step);\n      await this.apiManager.localUserProfile.save();\n    }\n  }\n\n  public gettingStartedProgress(): string[] {\n    return this.apiManager.localUserProfile.gettingStartedCompletedSteps ?? [];\n  }\n\n  public async onArgonFileDrop(path: string): Promise<void> {\n    const argonFile = await ArgonFile.readFromPath(path);\n    if (!argonFile) {\n      throw new Error(\"Sorry, we couldn't read the Argon file you've just dropped.\");\n    }\n    await this.onArgonFileOpened(argonFile);\n  }\n\n  public async addBrokerAccount(\n    request: Omit<IDatabrokerAuthAccount, 'userIdentity'>,\n  ): Promise<IDatabrokerAccount> {\n    if (request.pemPath?.startsWith('~')) {\n      request.pemPath = Path.join(Os.homedir(), request.pemPath.slice(1));\n    }\n    const account = await this.apiManager.accountManager.addBrokerAccount(request);\n    await this.apiManager.setDatabroker(request);\n    return account;\n  }\n\n  public async createAccount(request: {\n    name: string;\n    suri?: string;\n    password?: string;\n  }): Promise<LocalchainOverview> {\n    return await this.apiManager.accountManager.createAccount(\n      request.name,\n      request.suri,\n      request.password,\n    );\n  }\n\n  public async createArgonsToSendFile(request: {\n    milligons: bigint;\n    fromAddress?: string;\n    toAddress?: string;\n  }): Promise<IArgonFileMeta> {\n    return this.apiManager.accountManager.createArgonsToSendFile(request);\n  }\n\n  public async transferArgonsFromMainchain(request: {\n    milligons: bigint;\n    address: string;\n  }): Promise<void> {\n    await this.apiManager.accountManager.transferMainchainToLocal(\n      request.address,\n      request.milligons,\n    );\n  }\n\n  public async transferArgonsToMainchain(request: {\n    milligons: bigint;\n    address: string;\n  }): Promise<void> {\n    return this.apiManager.accountManager.transferLocalToMainchain(\n      request.address,\n      request.milligons,\n    );\n  }\n\n  public async createArgonsToRequestFile(request: {\n    milligons: bigint;\n    sendToMyAddress?: string;\n  }): Promise<IArgonFileMeta> {\n    return this.apiManager.accountManager.createArgonsToRequestFile(request);\n  }\n\n  public async acceptArgonRequest(request: {\n    argonFile: IArgonFile;\n    fundWithAddress?: string;\n  }): Promise<void> {\n    const argonFile = ArgonFileSchema.parse(request.argonFile);\n    if (argonFile.credit) {\n      await this.saveCredit({ credit: argonFile.credit });\n      return;\n    }\n    return this.apiManager.accountManager.acceptArgonRequest(argonFile, request.fundWithAddress);\n  }\n\n  public async importArgons(claim: { argonFile: IArgonFile }): Promise<void> {\n    const argonFile = ArgonFileSchema.parse(claim.argonFile);\n    if (argonFile.credit) {\n      await this.saveCredit({ credit: argonFile.credit });\n      return;\n    }\n    return this.apiManager.accountManager.importArgons(argonFile);\n  }\n\n  public getInstalledDatastores(): ILocalUserProfile['installedDatastores'] {\n    return this.apiManager.localUserProfile.installedDatastores;\n  }\n\n  public getQueries(): IQueryLogEntry[] {\n    return Object.values(this.apiManager.queryLogWatcher.queriesById);\n  }\n\n  public queryDatastore(args: {\n    id: string;\n    version: string;\n    cloudHost: string;\n    query: string;\n  }): Promise<IQueryLogEntry> {\n    const { id, version, query, cloudHost } = args;\n    const client = this.apiManager.getDatastoreClient(cloudHost);\n    const queryId = nanoid(12);\n    const date = new Date();\n    const paymentService =\n      this.apiManager.databrokerPaymentService ?? this.apiManager.paymentService;\n\n    void client.query(id, version, query, { queryId, paymentService });\n    return Promise.resolve({\n      date,\n      query,\n      input: [],\n      id,\n      version,\n      queryId,\n    } as any);\n  }\n\n  public async deployDatastore(args: {\n    id: string;\n    version: string;\n    cloudHost: string;\n    cloudName: string;\n  }): Promise<void> {\n    const { id, version, cloudName, cloudHost } = args;\n    const adminIdentity = this.apiManager.localUserProfile.getAdminIdentity(id, cloudName);\n\n    if (!cloudHost) throw new Error('No cloud host available.');\n    const apiClient = new DatastoreApiClient(cloudHost);\n    if (version.includes(DatastoreManifest.TemporaryIdPrefix)) {\n      throw new Error('This Datastore has only been started. You need to deploy it.');\n    }\n    const {\n      compressedDbx,\n      adminSignature,\n      adminIdentity: identityResult,\n    } = await apiClient.download(id, version, adminIdentity);\n    await apiClient.upload(compressedDbx, {\n      forwardedSignature: { adminIdentity: identityResult, adminSignature },\n    });\n  }\n\n  public async installDatastore(arg: {\n    cloudHost: string;\n    id: string;\n    version: string;\n  }): Promise<void> {\n    const { cloudHost, id, version } = arg;\n    await this.apiManager.localUserProfile.installDatastore(cloudHost, id, version);\n  }\n\n  public async uninstallDatastore(arg: {\n    cloudHost: string;\n    id: string;\n    version: string;\n  }): Promise<void> {\n    const { cloudHost, id, version } = arg;\n    await this.apiManager.localUserProfile.uninstallDatastore(cloudHost, id, version);\n  }\n\n  public async setDatastoreAdminIdentity(\n    datastoreId: string,\n    adminIdentityPath: string,\n  ): Promise<string> {\n    return await this.apiManager.localUserProfile.setDatastoreAdminIdentity(\n      datastoreId,\n      adminIdentityPath,\n    );\n  }\n\n  public async saveCredit(arg: { credit: TCredit }): Promise<void> {\n    if (!arg.credit) return;\n    const credit = await CreditReserver.storeCreditFromUrl(\n      arg.credit.datastoreUrl,\n      arg.credit.microgons,\n      await this.apiManager.accountManager.getDatastoreHostLookup(),\n    );\n    if (!this.apiManager.paymentService) throw new Error('No payment service available.');\n    this.apiManager.paymentService.addCredit(credit);\n  }\n\n  public async createCredit(args: {\n    datastore: Pick<IDatastoreResultItem, 'id' | 'version' | 'name' | 'scriptEntrypoint'>;\n    cloud: string;\n    argons: number;\n  }): Promise<IArgonFileMeta> {\n    const { argons, datastore } = args;\n    const address = new URL(this.apiManager.getCloudAddressByName(args.cloud) ?? '');\n    const adminIdentity = this.apiManager.localUserProfile.getAdminIdentity(\n      datastore.id,\n      args.cloud,\n    );\n    if (!adminIdentity) {\n      throw new Error(\"Sorry, we couldn't find the AdminIdentity for this cloud.\");\n    }\n    const microgons = argons * Number(ArgonUtils.MicrogonsPerArgon);\n    const client = new DatastoreApiClient(address.href);\n    try {\n      const { id, remainingCredits, secret } = await client.createCredits(\n        datastore.id,\n        datastore.version,\n        microgons,\n        adminIdentity,\n      );\n\n      const file: IArgonFile = {\n        version: ARGON_FILE_VERSION,\n        credit: {\n          datastoreUrl: `ulx://${id}:${secret}@${address.host}/${datastore.id}@v${datastore.version}`,\n          microgons: remainingCredits,\n        },\n      };\n\n      return {\n        rawJson: JSON.stringify(file),\n        file,\n        name: `₳${argons} at ${\n          (datastore.name ?? datastore.scriptEntrypoint)?.replace(/[.\\\\/]/g, '-') ??\n          'a Ulixee Datastore'\n        }.${ARGON_FILE_EXTENSION}`,\n      };\n    } finally {\n      await client.disconnect();\n    }\n  }\n\n  public async dragArgonsAsFile(args: IArgonFileMeta, context: WebContents): Promise<void> {\n    const file = Path.join(Os.tmpdir(), '.ulixee', args.name);\n    await ArgonFile.create(args.rawJson, file);\n    context.startDrag({\n      file,\n      icon: argIconPath,\n    });\n  }\n\n  public async showContextMenu(\n    args: IArgonFileMeta & {\n      position: { x: number; y: number };\n    },\n  ): Promise<void> {\n    const file = Path.join(Os.tmpdir(), '.ulixee', args.name);\n    await ArgonFile.create(args.rawJson, file);\n\n    const menu = Menu.buildFromTemplate([\n      {\n        label: 'Copy',\n        accelerator: 'CmdOrCtrl+C',\n        click() {\n          try {\n            // eslint-disable-next-line import/no-unresolved\n            const clipboardEx = require('electron-clipboard-ex');\n            clipboardEx.writeFilePaths([file]);\n          } catch (e) {}\n        },\n      },\n      {\n        type: 'separator',\n      },\n      {\n        role: 'shareMenu',\n        sharingItem: {\n          filePaths: [file],\n        },\n      },\n    ]);\n    menu.popup({ x: args.position.x, y: args.position.y });\n  }\n\n  public async onArgonFileOpened(file: IArgonFile): Promise<void> {\n    await this.waitForConnection;\n    this.connectionToClient?.sendEvent({ eventType: 'Argon.opened', data: file });\n  }\n\n  public async findAdminIdentity(datastoreId: string): Promise<string | null> {\n    const result = await dialog.showOpenDialog({\n      properties: ['openFile', 'showHiddenFiles'],\n      message: 'Select your Admin Identity for this Datastore to enable administrative features.',\n      defaultPath: Path.join(getDataDirectory(), 'ulixee', 'identities'),\n      filters: [{ name: 'Identities', extensions: ['pem'] }],\n    });\n    if (result.filePaths.length) {\n      const [filename] = result.filePaths;\n      return await this.setDatastoreAdminIdentity(datastoreId, filename);\n    }\n    return null;\n  }\n\n  public async findCloudAdminIdentity(cloudName: string): Promise<string | null> {\n    const result = await dialog.showOpenDialog({\n      properties: ['openFile', 'showHiddenFiles'],\n      message: 'Select your Admin Identity for this Cloud to enable administrative features.',\n      defaultPath: Path.join(getDataDirectory(), 'ulixee', 'identities'),\n      filters: [{ name: 'Identities', extensions: ['pem'] }],\n    });\n    if (result.filePaths.length) {\n      const [filename] = result.filePaths;\n      return await this.apiManager.localUserProfile.setCloudAdminIdentity(cloudName, filename);\n    }\n    return null;\n  }\n\n  public getAdminIdentities(): {\n    datastoresById: {\n      [id: string]: string;\n    };\n    cloudsByName: { [name: string]: string };\n  } {\n    const datastoresById: Record<string, string> = {};\n    for (const { datastoreId, adminIdentity } of this.apiManager.localUserProfile\n      .datastoreAdminIdentities) {\n      if (adminIdentity) datastoresById[datastoreId] = adminIdentity;\n    }\n    const cloudsByName: Record<string, string> = {};\n    for (const cloud of this.apiManager.apiByCloudAddress.values()) {\n      if (cloud.adminIdentity) {\n        cloudsByName[cloud.name] = cloud.adminIdentity;\n      }\n    }\n    return { datastoresById, cloudsByName };\n  }\n\n  public async onDeployment(event: IDatastoreDeployLogEntry): Promise<void> {\n    this.connectionToClient?.sendEvent({ eventType: 'Datastore.onDeployed', data: event });\n  }\n\n  public async onQuery(event: IQueryLogEntry): Promise<void> {\n    this.connectionToClient?.sendEvent({ eventType: 'User.onQuery', data: event });\n  }\n\n  public async onNewCloudAddress(event: ICloudConnected): Promise<void> {\n    this.connectionToClient?.sendEvent({ eventType: 'Cloud.onConnected', data: event });\n  }\n\n  public async onWalletUpdated(event: { wallet: IWallet }): Promise<void> {\n    this.connectionToClient?.sendEvent({ eventType: 'Wallet.updated', data: event });\n  }\n\n  public openReplay(arg: IOpenReplay): void {\n    this.emit('open-replay', arg);\n  }\n\n  public getCloudConnections(): ICloudConnected[] {\n    const result: ICloudConnected[] = [];\n    for (const [address, group] of this.apiManager.apiByCloudAddress) {\n      if (group.resolvable.isResolved && !group.resolvable.resolved?.api) continue;\n      result.push({\n        address,\n        cloudNodes: group.cloudNodes,\n        adminIdentity: group.adminIdentity,\n        name: group.name,\n        type: group.type,\n      });\n    }\n    return result;\n  }\n\n  public async connectToPrivateCloud(arg: {\n    address: string;\n    name: string;\n    adminIdentityPath?: string;\n  }): Promise<void> {\n    const { address, name, adminIdentityPath } = arg;\n    if (!address) {\n      console.warn('No valid address provided to connect to', arg);\n      return;\n    }\n    const adminIdentity = adminIdentityPath\n      ? Identity.loadFromFile(adminIdentityPath).bech32\n      : undefined;\n    await this.apiManager.connectToCloud({\n      address,\n      type: 'private',\n      name,\n      adminIdentity,\n    });\n\n    const profile = this.apiManager.localUserProfile;\n    if (!profile.clouds.find(x => x.address === address)) {\n      profile.clouds.push({ address, name, adminIdentityPath });\n      await profile.save();\n    }\n  }\n}\n","import { CloudNode } from '@ulixee/cloud';\nimport UlixeeHostsConfig from '@ulixee/commons/config/hosts';\nimport EventSubscriber from '@ulixee/commons/lib/EventSubscriber';\nimport { TypedEventEmitter } from '@ulixee/commons/lib/eventUtils';\nimport Resolvable from '@ulixee/commons/lib/Resolvable';\nimport { toUrl } from '@ulixee/commons/lib/utils';\nimport IDatastoreDeployLogEntry from '@ulixee/datastore-core/interfaces/IDatastoreDeployLogEntry';\nimport { IWallet } from '@ulixee/datastore/interfaces/IPaymentService';\nimport IQueryLogEntry from '@ulixee/datastore/interfaces/IQueryLogEntry';\nimport DatastoreApiClient from '@ulixee/datastore/lib/DatastoreApiClient';\nimport DatastoreApiClients from '@ulixee/datastore/lib/DatastoreApiClients';\nimport LocalUserProfile from '@ulixee/datastore/lib/LocalUserProfile';\nimport QueryLog from '@ulixee/datastore/lib/QueryLog';\nimport DefaultPaymentService from '@ulixee/datastore/payments/DefaultPaymentService';\nimport { IDesktopAppApis } from '@ulixee/desktop-interfaces/apis';\nimport { IDatabrokerAuthAccount } from '@ulixee/datastore/interfaces/ILocalUserProfile';\nimport { ICloudConnected } from '@ulixee/desktop-interfaces/apis/IDesktopApis';\nimport IDesktopAppEvents from '@ulixee/desktop-interfaces/events/IDesktopAppEvents';\nimport ArgonUtils from '@ulixee/platform-utils/lib/ArgonUtils';\nimport { screen, app } from 'electron';\nimport * as http from 'http';\nimport { AddressInfo } from 'net';\nimport * as Path from 'path';\nimport { ClientOptions } from 'ws';\nimport WebSocket from 'ws';\nimport ArgonPaymentProcessor from '@ulixee/datastore-core/lib/ArgonPaymentProcessor';\nimport AccountManager from './AccountManager';\nimport ApiClient from './ApiClient';\nimport ArgonFile, { IArgonFile } from './ArgonFile';\nimport DeploymentWatcher from './DeploymentWatcher';\nimport PrivateDesktopApiHandler from './PrivateDesktopApiHandler';\nimport { version } from '..';\n\nconst bundledDatastoreExample = Path.resolve(app.getAppPath(), 'resources', 'ulixee-docs.dbx.tgz');\n\nexport default class ApiManager<\n  TEventType extends keyof IDesktopAppEvents & string = keyof IDesktopAppEvents,\n> extends TypedEventEmitter<{\n  'api-event': {\n    cloudAddress: string;\n    eventType: TEventType;\n    data: IDesktopAppEvents[TEventType];\n  };\n  'new-cloud-address': ICloudConnected;\n  'argon-file-opened': IArgonFile;\n  deployment: IDatastoreDeployLogEntry;\n  'wallet-updated': { wallet: IWallet };\n  query: IQueryLogEntry;\n}> {\n  apiByCloudAddress = new Map<\n    string,\n    {\n      name: string;\n      adminIdentity?: string;\n      cloudNodes: number;\n      type: 'local' | 'public' | 'private';\n      resolvable: Resolvable<IApiGroup>;\n    }\n  >();\n\n  localCloud?: CloudNode;\n  exited = false;\n  events = new EventSubscriber();\n  localCloudAddress?: string;\n  debuggerUrl?: string;\n  localUserProfile: LocalUserProfile;\n  deploymentWatcher: DeploymentWatcher;\n  paymentService?: DefaultPaymentService;\n  databrokerPaymentService?: DefaultPaymentService;\n  accountManager: AccountManager;\n  queryLogWatcher: QueryLog;\n  privateDesktopApiHandler: PrivateDesktopApiHandler;\n  privateDesktopWsServer?: WebSocket.Server;\n  privateDesktopWsServerAddress?: string;\n  datastoreApiClients = new DatastoreApiClients();\n  private reconnectsByAddress: { [address: string]: NodeJS.Timeout } = {};\n\n  constructor() {\n    super();\n    this.localUserProfile = new LocalUserProfile();\n    this.deploymentWatcher = new DeploymentWatcher();\n    this.queryLogWatcher = new QueryLog();\n    this.privateDesktopApiHandler = new PrivateDesktopApiHandler(this);\n    this.accountManager = new AccountManager(this.localUserProfile);\n  }\n\n  public async start(): Promise<void> {\n    this.debuggerUrl = await this.getDebuggerUrl();\n    this.privateDesktopWsServer = new WebSocket.Server({ port: 0 });\n    this.events.on(\n      this.privateDesktopWsServer,\n      'connection',\n      this.handlePrivateApiWsConnection.bind(this),\n    );\n    this.privateDesktopWsServerAddress = await new Promise<string>(resolve => {\n      this.privateDesktopWsServer.once('listening', () => {\n        const address = this.privateDesktopWsServer.address() as AddressInfo;\n        resolve(`ws://127.0.0.1:${address.port}`);\n      });\n    });\n    await this.accountManager.start();\n    this.events.on(this.accountManager, 'update', ev =>\n      this.emit('wallet-updated', { wallet: ev.wallet }),\n    );\n\n    if (!this.localUserProfile.defaultAdminIdentityPath) {\n      await this.localUserProfile.createDefaultAdminIdentity();\n    }\n    this.deploymentWatcher.start();\n    this.queryLogWatcher.monitor(x => this.emit('query', x));\n\n    if (this.localUserProfile.databrokers.length) {\n      await this.setDatabroker(this.localUserProfile.databrokers[0]);\n    }\n\n    if (this.accountManager.localchains.length) {\n      const localchain = this.accountManager.localchainForQuery;\n      if (localchain) await this.setLocalchainForPayment(localchain.name);\n    } else {\n      this.paymentService = new DefaultPaymentService();\n    }\n\n    // start before registering change handlers\n    await this.startLocalCloud();\n\n    this.events.on(UlixeeHostsConfig.global, 'change', this.onNewLocalCloudAddress.bind(this));\n    this.events.on(this.deploymentWatcher, 'new', x => this.emit('deployment', x));\n\n    // don't connect before we have a cloud started\n    for (const cloud of this.localUserProfile.clouds) {\n      await this.connectToCloud({\n        ...cloud,\n        adminIdentity: cloud.adminIdentity,\n        type: 'private',\n      });\n    }\n  }\n\n  public async setLocalchainForPayment(name: string): Promise<void> {\n    const localchain = this.accountManager.localchains.find(x => x.name === name);\n    if (!localchain) throw new Error(`Localchain ${name} not found`);\n    this.paymentService = await DefaultPaymentService.fromOpenLocalchain(\n      localchain,\n      {\n        queries: 10,\n        type: 'multiplier',\n      },\n      this.datastoreApiClients,\n    );\n  }\n\n  public async setDatabroker(broker: Omit<IDatabrokerAuthAccount, 'userIdentity'>): Promise<void> {\n    this.databrokerPaymentService = await DefaultPaymentService.fromBroker(\n      broker.host,\n      {\n        pemPath: broker.pemPath,\n        passphrase: broker.pemPassword,\n      },\n      {\n        queries: 10,\n        type: 'multiplier',\n      },\n      this.datastoreApiClients,\n    );\n  }\n\n  public async getWallet(): Promise<IWallet> {\n    if (!this.paymentService) throw new Error(\"Payment service isn't initialized\");\n    const localchainWallet = await this.accountManager.getWallet();\n    const credits = await this.paymentService.credits();\n    const creditBalance = credits.reduce((sum, x) => sum + x.remaining, 0);\n    const creditMilligons = ArgonUtils.microgonsToMilligons(creditBalance);\n\n    const localchainBalance = localchainWallet.accounts.reduce(\n      (sum, x) => sum + x.balance + x.mainchainBalance,\n      0n,\n    );\n\n    const brokerBalance = localchainWallet.brokerAccounts.reduce((sum, x) => sum + x.balance, 0n);\n\n    const formattedBalance = ArgonUtils.format(\n      localchainBalance + creditMilligons + brokerBalance,\n      'milligons',\n      'argons',\n    );\n\n    return {\n      ...localchainWallet,\n      credits,\n      formattedBalance,\n    };\n  }\n\n  public async close(): Promise<void> {\n    if (this.exited) return;\n    this.exited = true;\n\n    await this.localCloud?.desktopCore?.shutdown();\n    await this.stopLocalCloud();\n    this.privateDesktopWsServer?.close();\n    await this.privateDesktopApiHandler.close();\n    this.events.close('error');\n    for (const connection of this.apiByCloudAddress.values()) {\n      await this.closeApiGroup(connection.resolvable);\n    }\n    await this.datastoreApiClients.close();\n    this.apiByCloudAddress.clear();\n    this.deploymentWatcher.stop();\n    await this.queryLogWatcher.close();\n  }\n\n  public async stopLocalCloud(): Promise<void> {\n    await this.localCloud?.close();\n  }\n\n  public async startLocalCloud(): Promise<void> {\n    let localCloudAddress = UlixeeHostsConfig.global.getVersionHost(version);\n\n    localCloudAddress = await UlixeeHostsConfig.global.checkLocalVersionHost(\n      version,\n      localCloudAddress,\n    );\n    let adminIdentity: string | undefined;\n    if (!localCloudAddress) {\n      adminIdentity = this.localUserProfile.defaultAdminIdentity.bech32;\n      this.localCloud ??= new CloudNode({\n        shouldShutdownOnSignals: false,\n        host: 'localhost',\n        datastoreConfiguration: {\n          cloudAdminIdentities: [adminIdentity],\n        },\n      });\n      await this.localCloud.datastoreCore.copyDbxToStartDir(bundledDatastoreExample);\n\n      this.localCloud.datastoreCore.argonPaymentProcessor = new ArgonPaymentProcessor(\n        this.localCloud.datastoreCore.datastoresDir,\n        this.accountManager.localchainForCloudNode!,\n      );\n      await this.localCloud.listen();\n      localCloudAddress = await this.localCloud.address;\n    }\n    await this.connectToCloud({ address: localCloudAddress, type: 'local', adminIdentity });\n  }\n\n  public getDatastoreClient(cloudHost: string): DatastoreApiClient {\n    const hostUrl = toUrl(cloudHost);\n    this.datastoreApiClients[cloudHost] ??= new DatastoreApiClient(hostUrl.origin);\n    return this.datastoreApiClients[cloudHost];\n  }\n\n  public getCloudAddressByName(name: string): string | undefined {\n    for (const [address, entry] of this.apiByCloudAddress) {\n      if (entry.name === name) return address;\n    }\n  }\n\n  public async connectToCloud(cloud: ICloudSetup): Promise<void> {\n    const { adminIdentity, oldAddress, type } = cloud;\n    let { address, name } = cloud;\n    if (!address) return;\n    name ??= type;\n    address = this.formatCloudAddress(address);\n    if (this.apiByCloudAddress.has(address)) {\n      await this.apiByCloudAddress.get(address)?.resolvable.promise;\n      return;\n    }\n    try {\n      this.apiByCloudAddress.set(address, {\n        name: name ?? type,\n        adminIdentity,\n        type,\n        cloudNodes: 0,\n        resolvable: new Resolvable(),\n      });\n\n      const api = new ApiClient<IDesktopAppApis, IDesktopAppEvents>(\n        `${address}?type=app`,\n        this.onDesktopEvent.bind(this, address) as any,\n      );\n      await api.connect();\n      const onApiClosed = this.events.once(api, 'close', this.onApiClosed.bind(this, cloud));\n\n      const mainScreen = screen.getPrimaryDisplay();\n      const workarea = mainScreen.workArea;\n      const { id, cloudNodes } = await api.send('App.connect', {\n        workarea: {\n          left: workarea.x,\n          top: workarea.y,\n          ...workarea,\n          scale: mainScreen.scaleFactor,\n        },\n      });\n      const cloudApi = this.apiByCloudAddress.get(address);\n      if (!cloudApi) throw new Error(\"Cloud Api wasn't found\");\n      if (!this.debuggerUrl) throw new Error('Debugger URL not initialized');\n      cloudApi.cloudNodes = cloudNodes ?? 0;\n\n      const url = new URL(`/desktop-devtools`, api.transport.host);\n      url.searchParams.set('id', id);\n      // pipe connection\n      const [wsToCore, wsToDevtoolsProtocol] = await Promise.all([\n        this.connectToWebSocket(url.href, { perMessageDeflate: true }),\n        this.connectToWebSocket(this.debuggerUrl),\n      ]);\n      clearInterval(this.reconnectsByAddress[address]);\n      const events = [\n        this.events.on(wsToCore, 'message', msg => {\n          wsToDevtoolsProtocol.send(msg.toString());\n        }),\n        this.events.on(wsToCore, 'error', this.onDevtoolsError.bind(this, wsToCore)),\n        this.events.once(wsToCore, 'close', this.onApiClosed.bind(this, cloud)),\n        this.events.on(wsToDevtoolsProtocol, 'message', msg => wsToCore.send(msg.toString())),\n        this.events.on(\n          wsToDevtoolsProtocol,\n          'error',\n          this.onDevtoolsError.bind(this, wsToDevtoolsProtocol),\n        ),\n        this.events.once(wsToDevtoolsProtocol, 'close', this.onApiClosed.bind(this, cloud)),\n      ];\n      this.events.group(`ws-${address}`, onApiClosed, ...events);\n      cloudApi.resolvable.resolve({\n        id,\n        api,\n        wsToCore,\n        wsToDevtoolsProtocol,\n      });\n      this.emit('new-cloud-address', {\n        address,\n        adminIdentity,\n        name,\n        cloudNodes,\n        type,\n        oldAddress,\n      });\n    } catch (error) {\n      this.apiByCloudAddress.get(address)?.resolvable.reject(error, true);\n      this.apiByCloudAddress.delete(address);\n    }\n  }\n\n  public async onArgonFileOpened(file: string): Promise<void> {\n    const argonFile = await ArgonFile.readFromPath(file);\n    if (argonFile) {\n      this.emit('argon-file-opened', argonFile);\n    }\n  }\n\n  private onDesktopEvent(\n    cloudAddress: string,\n    eventType: TEventType,\n    data: IDesktopAppEvents[TEventType],\n  ): void {\n    if (this.exited) return;\n\n    if (eventType === 'Session.opened') {\n      this.emit('api-event', { cloudAddress, eventType, data });\n    }\n\n    if (eventType === 'App.quit') {\n      const apis = this.apiByCloudAddress.get(cloudAddress);\n      if (apis) {\n        void this.closeApiGroup(apis.resolvable);\n      }\n    }\n  }\n\n  private onDevtoolsError(ws: WebSocket, error: Error): void {\n    console.warn('ERROR in devtools websocket with Core at %s', ws.url, error);\n  }\n\n  private async onNewLocalCloudAddress(): Promise<void> {\n    const newAddress = UlixeeHostsConfig.global.getVersionHost(version);\n    if (!newAddress) return;\n    if (this.localCloudAddress !== newAddress) {\n      const oldAddress = this.localCloudAddress;\n      this.localCloudAddress = this.formatCloudAddress(newAddress);\n      // eslint-disable-next-line no-console\n      console.log('Desktop app connecting to local cloud', this.localCloudAddress);\n      await this.connectToCloud({\n        address: this.localCloudAddress,\n        adminIdentity: this.localUserProfile.defaultAdminIdentity?.bech32,\n        name: 'local',\n        type: 'local',\n        oldAddress,\n      });\n    }\n  }\n\n  private onApiClosed(cloud: ICloudSetup): void {\n    const { address, name } = cloud;\n    console.warn('Api Disconnected', address, name);\n    const api = this.apiByCloudAddress.get(address);\n    this.events.endGroup(`ws-${address}`);\n    if (api) {\n      void this.closeApiGroup(api.resolvable);\n    }\n    this.apiByCloudAddress.delete(address);\n    if (!this.exited) {\n      this.reconnectsByAddress[cloud.address] = setTimeout(\n        this.reconnect.bind(this, cloud, 1e3),\n        1e3,\n      ).unref();\n    }\n  }\n\n  private reconnect(cloud: ICloudSetup, delay: number): void {\n    if (this.exited) return;\n    console.warn('Reconnecting to Api', { address: cloud.address, name: cloud.name });\n    void this.connectToCloud(cloud).catch(() => {\n      this.reconnectsByAddress[cloud.address] = setTimeout(\n        this.reconnect.bind(this, cloud, delay * 2),\n        Math.min(5 * 60e3, delay * 2),\n      ).unref();\n    });\n  }\n\n  private async closeApiGroup(group: Resolvable<IApiGroup>): Promise<void> {\n    const { api, wsToCore, wsToDevtoolsProtocol } = await group;\n    if (api.isConnected) await api.disconnect();\n    wsToCore?.close();\n    return wsToDevtoolsProtocol?.close();\n  }\n\n  private async connectToWebSocket(host: string, options?: ClientOptions): Promise<WebSocket> {\n    const ws = new WebSocket(host, options);\n    await new Promise<void>((resolve, reject) => {\n      const closeEvents = [\n        this.events.once(ws, 'close', reject),\n        this.events.once(ws, 'error', reject),\n      ];\n      this.events.once(ws, 'open', () => {\n        this.events.off(...closeEvents);\n        resolve();\n      });\n    });\n    return ws;\n  }\n\n  private handlePrivateApiWsConnection(ws: WebSocket, req: http.IncomingMessage): void {\n    this.privateDesktopApiHandler.onConnection(ws, req);\n  }\n\n  private async getDebuggerUrl(): Promise<string> {\n    const responseBody = await new Promise<string>((resolve, reject) => {\n      const request = http.get(\n        `http://127.0.0.1:${process.env.DEVTOOLS_PORT}/json/version`,\n        async res => {\n          let jsonString = '';\n          res.setEncoding('utf8');\n          for await (const chunk of res) jsonString += chunk;\n          resolve(jsonString);\n        },\n      );\n      request.once('error', reject);\n      request.end();\n    });\n    const debugEndpoints = JSON.parse(responseBody);\n\n    return debugEndpoints.webSocketDebuggerUrl;\n  }\n\n  private formatCloudAddress(host: string): string {\n    const url = toUrl(host);\n    url.pathname = '/desktop';\n    return url.href;\n  }\n}\n\ninterface IApiGroup {\n  api: ApiClient<IDesktopAppApis, IDesktopAppEvents>;\n  id: string;\n  wsToCore: WebSocket;\n  wsToDevtoolsProtocol: WebSocket;\n}\n\ninterface ICloudSetup {\n  address: string;\n  adminIdentity?: string;\n  type: 'public' | 'private' | 'local';\n  name?: string;\n  oldAddress?: string;\n}\n","import { defaultBrowserEngine } from '@ulixee/default-browser-emulator';\n\nlet hasUnpackedChrome = false;\nexport default async function installDefaultChrome(): Promise<void> {\n  if (hasUnpackedChrome) return;\n  try {\n    // eslint-disable-next-line global-require,import/no-dynamic-require\n    let LatestChrome = require(`@ulixee/${defaultBrowserEngine.id}`);\n    if (LatestChrome.default) LatestChrome = LatestChrome.default;\n    const chromeApp = new LatestChrome();\n    if (chromeApp.isInstalled) {\n      hasUnpackedChrome = true;\n      return;\n    }\n    await chromeApp.install();\n    hasUnpackedChrome = true;\n  } catch (err) {\n    console.error('ERROR trying to install latest browser', err);\n  }\n}\n","import { WebContents, app } from 'electron';\nimport Path from 'path';\n\nexport function isDev(): boolean {\n  return !app.isPackaged;\n}\n\nexport default async function loadUrl(webContents: WebContents, path: string): Promise<void> {\n  if (isDev() && process.env['VITE_DEV_SERVER_URL']) {\n    await webContents.loadURL(`${process.env['VITE_DEV_SERVER_URL']}/ui/${path}`);\n  } else {\n    await webContents.loadFile(Path.join(app.getAppPath(), `ui/${path}`));\n  }\n}\n\nexport function getUrl(path: string): string {\n  if (isDev() && process.env['VITE_DEV_SERVER_URL']) {\n    return `${process.env['VITE_DEV_SERVER_URL']}/ui/${path}`;\n  } else {\n    return Path.join(`./ui/${path}`);\n  }\n}\n","import { BrowserWindow, Display, Rectangle, screen } from 'electron';\n\nexport default {\n  alignTrayMenu(trayWindow: BrowserWindow, trayBounds: Rectangle): void {\n    if (process.platform === 'linux') {\n      trayBounds = { width: 0, height: 0, ...screen.getCursorScreenPoint() };\n    }\n\n    const windowBounds = trayWindow.getBounds();\n    const display = screen.getDisplayNearestPoint(trayBounds);\n\n    let x: number;\n    let y: number;\n    if (display.workArea.y > display.bounds.y) {\n      // bar is top,\n      x = calculateXAlign(display, windowBounds, trayBounds);\n      y = display.workArea.y;\n    } else if (display.workArea.x > display.bounds.x) {\n      // bar is left\n      x = display.workArea.x;\n      y = calculateYAlign(display, windowBounds, trayBounds);\n    } else if (display.workArea.width === display.bounds.width) {\n      // bar is bottom\n      x = calculateXAlign(display, windowBounds, trayBounds);\n      y = display.workArea.height - windowBounds.height;\n\n      // windows 11 can jump into the workarea\n      if (trayBounds.y < display.workArea.y + display.workArea.height) {\n        y = trayBounds.y - windowBounds.height;\n      }\n    } else {\n      // bar is right\n      x = display.workArea.width - windowBounds.width;\n      y = calculateYAlign(display, windowBounds, trayBounds);\n    }\n    y = Math.round(y);\n    x = Math.round(x);\n\n    trayWindow.setPosition(x, y);\n  },\n};\n\nfunction calculateXAlign(display: Display, windowBounds: Rectangle, trayBounds: Rectangle): number {\n  let x = Math.round(trayBounds.x + trayBounds.width / 2 - windowBounds.width / 2);\n\n  // handle overflows\n  if (x + windowBounds.width > display.bounds.width + display.bounds.x) {\n    x = trayBounds.x + trayBounds.width - windowBounds.width;\n  } else if (x < display.bounds.x) {\n    x = trayBounds.x;\n  }\n\n  return x;\n}\n\nfunction calculateYAlign(display: Display, windowBounds: Rectangle, trayBounds: Rectangle): number {\n  let y = trayBounds.y;\n\n  // handle overflows\n  if (y + windowBounds.height > display.bounds.height) {\n    y = trayBounds.y + trayBounds.height - windowBounds.height;\n  }\n\n  return y;\n}\n","import { clipboard, Menu, nativeImage } from 'electron';\n\nexport default function generateContextMenu(\n  params: Electron.ContextMenuParams,\n  webContents: Electron.WebContents,\n): Menu {\n  let menuItems: Electron.MenuItemConstructorOptions[] = [];\n\n  if (params.linkURL !== '') {\n    menuItems = menuItems.concat([\n      {\n        label: 'Copy link address',\n        click: () => {\n          clipboard.clear();\n          clipboard.writeText(params.linkURL);\n        },\n      },\n      {\n        type: 'separator',\n      },\n    ]);\n  }\n\n  if (params.hasImageContents) {\n    menuItems = menuItems.concat([\n      {\n        label: 'Copy image',\n        click: () => {\n          const img = nativeImage.createFromDataURL(params.srcURL);\n\n          clipboard.clear();\n          clipboard.writeImage(img);\n        },\n      },\n      {\n        label: 'Copy image address',\n        click: () => {\n          clipboard.clear();\n          clipboard.writeText(params.srcURL);\n        },\n      },\n      {\n        type: 'separator',\n      },\n    ]);\n  }\n\n  if (params.isEditable) {\n    menuItems = menuItems.concat([\n      {\n        role: 'undo',\n        accelerator: 'CmdOrCtrl+Z',\n      },\n      {\n        role: 'redo',\n        accelerator: 'CmdOrCtrl+Shift+Z',\n      },\n      {\n        type: 'separator',\n      },\n      {\n        role: 'cut',\n        accelerator: 'CmdOrCtrl+X',\n      },\n      {\n        role: 'copy',\n        accelerator: 'CmdOrCtrl+C',\n      },\n      {\n        role: 'pasteAndMatchStyle',\n        accelerator: 'CmdOrCtrl+V',\n        label: 'Paste',\n      },\n      {\n        role: 'paste',\n        accelerator: 'CmdOrCtrl+Shift+V',\n        label: 'Paste as plain text',\n      },\n      {\n        role: 'selectAll',\n        accelerator: 'CmdOrCtrl+A',\n      },\n      {\n        type: 'separator',\n      },\n    ]);\n  }\n\n  if (!params.isEditable && params.selectionText !== '') {\n    menuItems = menuItems.concat([\n      {\n        role: 'copy',\n        accelerator: 'CmdOrCtrl+C',\n      },\n      {\n        type: 'separator',\n      },\n    ]);\n  }\n\n  menuItems.push({\n    label: 'Inspect',\n    accelerator: 'CmdOrCtrl+Shift+I',\n    click: () => {\n      webContents.inspectElement(params.x, params.y);\n      if (!webContents.isDevToolsFocused()) webContents.devToolsWebContents?.focus();\n    },\n  });\n\n  return Menu.buildFromTemplate(menuItems);\n}\n","import { BrowserView } from 'electron';\nimport generateContextMenu from '../menus/generateContextMenu';\nimport BrowserWindow = Electron.BrowserWindow;\nimport Rectangle = Electron.Rectangle;\nimport WebContents = Electron.WebContents;\n\nexport default class View {\n  public isHidden: boolean = false;\n  public bounds?: Rectangle;\n  public browserView?: BrowserView;\n\n  public get webContents(): WebContents | undefined {\n    return this.browserView?.webContents;\n  }\n\n  protected isAttached = false;\n  protected readonly window: BrowserWindow;\n\n  constructor(window: BrowserWindow, webPreferences: Electron.WebPreferences = {}) {\n    this.window = window;\n    this.browserView = new BrowserView({\n      webPreferences: {\n        sandbox: false,\n        ...webPreferences,\n      },\n    });\n  }\n\n  public addContextMenu(): void {\n    const { webContents } = this;\n    if (!webContents) return;\n    webContents.on('context-menu', (e, params) => {\n      generateContextMenu(params, webContents).popup();\n    });\n  }\n\n  public attach(): void {\n    if (!this.isAttached) {\n      if (this.browserView) this.window.addBrowserView(this.browserView);\n      this.isAttached = true;\n    }\n  }\n\n  public bringToFront(): void {\n    this.attach();\n    if (this.browserView) this.window.setTopBrowserView(this.browserView);\n  }\n\n  public detach(): void {\n    if (this.browserView) this.window.removeBrowserView(this.browserView);\n    this.isAttached = false;\n  }\n\n  public destroy(): void {\n    this.detach();\n    this.browserView = undefined;\n  }\n\n  public hide(): void {\n    const { x, y } = this.bounds ?? { x: 0, y: 0 };\n    this.setBounds({ x, y, width: 0, height: 0 });\n  }\n\n  public async getContentsHeight(): Promise<number> {\n    if (!this.webContents) return 0;\n    return await this.webContents.executeJavaScript(\n      `document.querySelector('body > #app').offsetHeight`,\n    );\n  }\n\n  public setBounds(newBounds: Rectangle): void {\n    if (\n      this.bounds &&\n      this.bounds.x === newBounds.x &&\n      this.bounds.y === newBounds.y &&\n      this.bounds.width === newBounds.width &&\n      this.bounds.height === newBounds.height\n    ) {\n      return;\n    }\n    this.browserView?.setBounds(newBounds);\n    this.bounds = newBounds;\n    this.isHidden = newBounds.width === 0 && newBounds.height === 0;\n  }\n\n  public static async getTargetInfo(wc: WebContents): Promise<{\n    targetId: string;\n    browserContextId: string;\n    url: string;\n  }> {\n    wc.debugger.attach();\n    const { targetInfo } = await wc.debugger.sendCommand('Target.getTargetInfo');\n    wc.debugger.detach();\n    return targetInfo;\n  }\n}\n","import EventSubscriber from '@ulixee/commons/lib/EventSubscriber';\nimport Queue from '@ulixee/commons/lib/Queue';\nimport { bindFunctions } from '@ulixee/commons/lib/utils';\nimport { IChromeAliveSessionApis } from '@ulixee/desktop-interfaces/apis';\nimport IChromeAliveSessionEvents from '@ulixee/desktop-interfaces/events/IChromeAliveSessionEvents';\nimport ISessionAppModeEvent from '@ulixee/desktop-interfaces/events/ISessionAppModeEvent';\nimport HeroCore from '@ulixee/hero-core';\nimport { data } from 'autoprefixer';\nimport { app, BrowserWindow, MenuItem, screen, shell } from 'electron';\nimport { nanoid } from 'nanoid';\nimport * as Path from 'path';\nimport moment from 'moment';\nimport generateContextMenu from '../menus/generateContextMenu';\nimport ApiClient from './ApiClient';\nimport View from './View';\nimport BrowserView = Electron.BrowserView;\nimport loadUrl, { getUrl } from './util/loadUrl';\n\n// make electron packaging friendly\nconst extensionPath = Path.resolve(__dirname, '../ui').replace('app.asar', 'app.asar.unpacked');\ninterface IReplayTab {\n  view: View;\n  heroTabId: number;\n  targetId: string;\n  browserContextId: string;\n  chromeTabId: number;\n}\n\nexport default class ChromeAliveWindow {\n  private static pages = {\n    Input: '/screen-input.html',\n    Output: '/screen-output.html',\n    Reliability: '/screen-reliability.html',\n  } as const;\n\n  window: BrowserWindow;\n  api?: ApiClient<IChromeAliveSessionApis, IChromeAliveSessionEvents>;\n  enableDevtoolsOnDevtools = process.env.DEVTOOLS ?? false;\n\n  private get activeReplayTab(): IReplayTab {\n    return this.#replayTabs[this.#activeTabIdx];\n  }\n\n  #childWindowsByName = new Map<string, BrowserWindow>();\n  #toolbarView: View;\n  #toolbarHeight = 44;\n  #activeTabIdx = 0;\n  #replayTabs: IReplayTab[] = [];\n  #mainView: View;\n  #showingPopupName?: string;\n  #hasShown = false;\n  #addTabQueue = new Queue('TAB CREATOR', 1);\n\n  #eventSubscriber = new EventSubscriber();\n\n  constructor(\n    public readonly session: {\n      heroSessionId: string;\n      dbPath: string;\n    },\n    cloudAddress: string,\n  ) {\n    bindFunctions(this);\n    this.createApi(cloudAddress);\n    const currentWindow = BrowserWindow.getFocusedWindow() ?? BrowserWindow.getAllWindows()[0]; // Get the currently focused window\n    const windowBounds = currentWindow.getBounds();\n    const display = screen.getDisplayNearestPoint({ x: windowBounds.x, y: windowBounds.y });\n    const workarea = display.bounds;\n\n    this.window = new BrowserWindow({\n      show: false,\n      acceptFirstMouse: true,\n      titleBarStyle: 'hiddenInset',\n      icon: Path.resolve(app.getAppPath(), 'resources', 'icon.png'),\n      width: workarea.width,\n      height: workarea.height,\n      y: workarea.y,\n      x: workarea.x,\n    });\n\n    this.window.title = `${this.session.heroSessionId}`;\n    this.#eventSubscriber.on(this.window, 'resize', this.relayout);\n    this.#eventSubscriber.on(this.window, 'maximize', this.relayout);\n    this.#eventSubscriber.on(this.window, 'restore', this.relayout);\n    this.#eventSubscriber.on(this.window, 'unmaximize', this.relayout);\n    this.#eventSubscriber.on(this.window, 'close', this.onClose);\n    this.#eventSubscriber.on(this.window, 'blur', () => {\n      const finderMenu = this.#childWindowsByName.get('MenuFinder');\n      if (finderMenu) {\n        finderMenu.setAlwaysOnTop(false);\n        finderMenu.moveAbove(this.window.getMediaSourceId());\n      }\n    });\n    this.#eventSubscriber.on(this.window, 'focus', () => {\n      this.#childWindowsByName.get('MenuFinder')?.setAlwaysOnTop(true);\n    });\n\n    this.#mainView = new View(this.window, {\n      preload: `${__dirname}/preload/chromealive.js`,\n    });\n    this.#mainView.attach();\n    this.#mainView.hide();\n    this.#eventSubscriber.on(this.#mainView.webContents!, 'focus', this.closeOpenPopup);\n\n    this.#toolbarView = new View(this.window, {\n      preload: `${__dirname}/preload/chromealive.js`,\n    });\n    this.#toolbarView.attach();\n    // for child windows\n    this.#toolbarView.webContents!.setWindowOpenHandler(details => {\n      const isMenu = details.frameName.includes('Menu');\n      const canMoveAndResize = !isMenu || details.frameName.startsWith('MenuFinder');\n\n      return {\n        action: 'allow',\n        overrideBrowserWindowOptions: {\n          resizable: canMoveAndResize,\n          frame: !isMenu,\n          roundedCorners: true,\n          movable: canMoveAndResize,\n          closable: true,\n          transparent: isMenu,\n          titleBarStyle: 'default',\n          alwaysOnTop: details.frameName.startsWith('MenuFinder'),\n          hasShadow: !isMenu,\n          details,\n          acceptFirstMouse: true,\n          useContentSize: true,\n          webPreferences: {\n            preload: `${__dirname}/preload/menubar.js`,\n          },\n        },\n      };\n    });\n\n    const toolbarWc = this.#toolbarView.webContents!;\n    this.#eventSubscriber.on(toolbarWc, 'did-create-window', (childWindow, details) => {\n      childWindow.moveAbove(this.window.getMediaSourceId());\n      this.trackChildWindow(childWindow, details);\n    });\n\n    if (process.env.DEVTOOLS) {\n      toolbarWc.openDevTools({ mode: 'detach' });\n    }\n    this.#eventSubscriber.on(toolbarWc, 'ipc-message', (e, eventName, ...args) => {\n      if (eventName === 'App:changeHeight') {\n        this.#toolbarHeight = args[0];\n        void this.relayout();\n      } else if (eventName === 'App:showChildWindow') {\n        const frameName = args[0];\n        const window = this.#childWindowsByName.get(frameName);\n        window?.show();\n        window?.focusOnWebView();\n      } else if (eventName === 'App:hideChildWindow') {\n        this.#childWindowsByName.get(args[0])?.close();\n      }\n    });\n  }\n\n  replayControl(direction: 'back' | 'forward'): void {\n    void this.api?.send('Session.timetravel', {\n      step: direction,\n    });\n  }\n\n  async load(): Promise<void> {\n    await this.api?.connect();\n    await this.addReplayTab();\n    await this.relayout();\n    if (!this.#toolbarView?.webContents) return;\n    await loadUrl(this.#toolbarView.webContents, 'toolbar.html');\n    await this.#toolbarView.webContents.executeJavaScript(`\n        const elem = document.querySelector('body > #app');\n        const resizeObserver = new ResizeObserver(() => {\n          document.dispatchEvent(\n            new CustomEvent('App:changeHeight', {\n              detail: {\n                height:elem.getBoundingClientRect().height,\n              },\n            }),\n          );\n        });\n        resizeObserver.observe(elem);\n      `);\n\n    if (this.#toolbarView.browserView) await this.injectCloudAddress(this.#toolbarView.browserView);\n  }\n\n  public async onClose(): Promise<void> {\n    for (const win of this.#childWindowsByName.values()) {\n      if (win.webContents?.isDevToolsOpened()) win.webContents.closeDevTools();\n      win.close();\n    }\n    if (this.#toolbarView.webContents?.isDevToolsOpened()) {\n      this.#toolbarView.webContents.closeDevTools();\n    }\n    this.#toolbarView.webContents?.close();\n    for (const tab of this.#replayTabs) {\n      tab.view.webContents?.close();\n    }\n    this.#childWindowsByName.clear();\n    this.#eventSubscriber.close();\n    await this.api?.send('Session.close');\n    await this.api?.disconnect();\n  }\n\n  public async reconnect(address: string): Promise<void> {\n    if (this.api?.address.includes(address)) return;\n    if (this.api?.isConnected) {\n      await this.api.disconnect();\n    }\n    this.createApi(address);\n    if (!this.api) return;\n\n    await this.api.connect();\n    for (const tab of this.#replayTabs) {\n      const webContents = tab.view.webContents;\n\n      await this.api.send('Session.replayTargetCreated', {\n        browserContextId: tab.browserContextId,\n        targetId: tab.targetId,\n        chromeTabId: tab.chromeTabId,\n        heroTabId: tab.heroTabId,\n        isReconnect: true,\n      });\n      const devtoolsWc = webContents?.devToolsWebContents;\n      if (devtoolsWc) {\n        const { targetId, browserContextId } = await View.getTargetInfo(devtoolsWc);\n\n        await this.api.send('Session.devtoolsTargetOpened', {\n          isReconnect: true,\n          targetId,\n          browserContextId,\n        });\n      }\n    }\n    if (this.#toolbarView.browserView && this.#mainView.browserView) {\n      await Promise.all([\n        this.injectCloudAddress(this.#toolbarView.browserView),\n        this.injectCloudAddress(this.#mainView.browserView),\n      ]);\n    }\n  }\n\n  // NOTE: 1 is the default hero tab id for an incognito context. DOES NOT WORK in default context\n  private async addReplayTab(heroTabId = 1): Promise<void> {\n    await this.#addTabQueue.run(async () => {\n      if (this.#replayTabs.some(x => x.heroTabId === heroTabId)) return;\n      const view = new View(this.window);\n      view.browserView?.setAutoResize({ width: true, height: true });\n      view.attach();\n      if (!view.webContents) throw new Error('No web contents on view');\n\n      await view.webContents.session.loadExtension(extensionPath, {\n        allowFileAccess: false,\n      });\n      view.webContents.on('focus', () => {\n        if (!this.#showingPopupName?.startsWith('MenuFinder')) this.closeOpenPopup();\n      });\n\n      if (this.enableDevtoolsOnDevtools) await this.addDevtoolsOnDevtools(view);\n      this.#eventSubscriber.on(view.webContents, 'devtools-opened', async () => {\n        const address = this.api?.address;\n        if (address) {\n          await view.webContents?.executeJavaScript(`window.cloudAddress = '${address}'`);\n        }\n\n        const devtoolsWc = view.webContents?.devToolsWebContents;\n        if (!devtoolsWc) {\n          console.warn('No web contents on showing devtools');\n          return;\n        }\n\n        await devtoolsWc.executeJavaScript(\n          `(async () => {\n            while (typeof UI === 'undefined') {\n            console.log('waiting')\n              await new Promise(resolve => setTimeout(resolve, 100));\n            }\n\n            const tabbedPane = UI.panels.elements.parentWidgetInternal.parentWidgetInternal;\n            tabbedPane.closeTabs(['timeline', 'heap_profiler','heap-profiler', 'lighthouse', 'chrome_recorder', 'chrome-recorder', 'security', 'memory', 'resources', 'network', 'sources']);\n\n            for (let i =0; i < 50; i+=1) {\n               const tab = tabbedPane.tabs.find(x => x.titleInternal === 'Hero Script');\n               if (tab) {\n                 tabbedPane.insertBefore(tab, 0);\n                 tabbedPane.selectTab(tab.id);\n                 break;\n               }\n               await new Promise(resolve => setTimeout(resolve, i * 10));\n               await new Promise(requestAnimationFrame);\n            }\n          })()`,\n        );\n        const target = await View.getTargetInfo(devtoolsWc);\n        await this.api?.send('Session.devtoolsTargetOpened', target);\n      });\n      view.webContents.on('context-menu', (ev, params) => {\n        if (!view.webContents) return;\n        const menu = generateContextMenu(params, view.webContents);\n        menu.append(\n          new MenuItem({\n            label: 'Generate Selector',\n            click: () => {\n              view.webContents?.inspectElement(params.x, params.y);\n              void this.api?.send('Session.openMode', {\n                mode: 'Finder',\n                position: { x: params.x, y: params.y },\n                trigger: 'contextMenu',\n              });\n            },\n          }),\n        );\n        menu.popup();\n      });\n\n      await view.webContents.loadURL('about:blank');\n      view.webContents.openDevTools({ mode: 'bottom' });\n\n      const { targetId, browserContextId } = await View.getTargetInfo(view.webContents);\n      const chromeTabId = view.webContents.id;\n      this.#replayTabs.push({ view, targetId, heroTabId, browserContextId, chromeTabId });\n      await this.api?.send('Session.replayTargetCreated', {\n        targetId,\n        browserContextId,\n        heroTabId,\n        chromeTabId,\n      });\n    });\n  }\n\n  private createApi(baseHost: string): void {\n    const address = new URL(`/chromealive/${this.session.heroSessionId}`, baseHost);\n    if (!this.session.dbPath.includes(HeroCore.dataDir)) {\n      address.searchParams.set('path', this.session.dbPath);\n    }\n    this.api = new ApiClient(address.href, this.onChromeAliveEvent);\n    // eslint-disable-next-line no-console\n    console.log('Window connected to %s', this.api.address);\n    this.#eventSubscriber.once(this.api, 'close', this.onApiClose);\n  }\n\n  private async injectCloudAddress(view: BrowserView): Promise<void> {\n    const address = this.api?.address;\n    if (!address) return;\n    await view.webContents?.executeJavaScript(\n      `(() => {\n        window.cloudAddress = '${address}';\n        if ('setCloudAddress' in window) window.setCloudAddress(window.cloudAddress);\n      })()`,\n    );\n  }\n\n  private onApiClose(): void {\n    if (!this.api) return;\n    this.#eventSubscriber.off({ emitter: this.api, eventName: 'close', handler: this.onApiClose });\n    this.api = undefined;\n  }\n\n  private async addDevtoolsOnDevtools(view: View): Promise<void> {\n    const devtoolsOnDevtoolsWindow = new BrowserWindow({\n      show: false,\n    });\n    await devtoolsOnDevtoolsWindow.webContents.session.loadExtension(extensionPath, {\n      allowFileAccess: true,\n    });\n    devtoolsOnDevtoolsWindow.show();\n    view.webContents?.setDevToolsWebContents(devtoolsOnDevtoolsWindow.webContents);\n    devtoolsOnDevtoolsWindow.webContents.openDevTools({ mode: 'undocked' });\n  }\n\n  private async activateView(mode: ISessionAppModeEvent['mode']): Promise<void> {\n    let needsLayout = false;\n\n    if (mode === 'Live' || mode === 'Timetravel' || mode === 'Finder') {\n      if (this.activeReplayTab) {\n        needsLayout = this.activeReplayTab.view.isHidden;\n        this.activeReplayTab.view.isHidden = false;\n        this.activeReplayTab.view.bringToFront();\n      }\n      this.#mainView.hide();\n    } else {\n      needsLayout = this.#mainView.isHidden;\n      this.activeReplayTab?.view.hide();\n      this.#mainView.bringToFront();\n      this.#mainView.isHidden = false;\n      const page = ChromeAliveWindow.pages[mode];\n      if (page) {\n        const webContents = this.#mainView.webContents;\n        if (webContents && !webContents.getURL().includes(page)) {\n          await loadUrl(webContents, page);\n\n          if (this.#mainView.browserView) await this.injectCloudAddress(this.#mainView.browserView);\n\n          if (mode === 'Output') {\n            webContents.openDevTools({ mode: 'bottom' });\n            this.#eventSubscriber.on(webContents, 'devtools-opened', () => {\n              const devtoolsWc = this.#mainView.webContents?.devToolsWebContents;\n              void devtoolsWc\n                ?.executeJavaScript(\n                  `(async () => {\n                  while (!UI.panels.elements.parentWidgetInternal) await new Promise(requestAnimationFrame);\n         UI.panels.elements.parentWidgetInternal.parentWidgetInternal.closeTabs(['timeline', 'heap_profiler', 'chrome_recorder', 'lighthouse', 'security', 'resources', 'network', 'sources', 'elements']);\n      })()`,\n                )\n                .catch(() => null);\n            });\n          }\n        }\n      }\n    }\n    if (needsLayout) await this.relayout();\n  }\n\n  private async relayout(): Promise<void> {\n    const { width, height } = this.window.getContentBounds();\n\n    this.#toolbarView.setBounds({ height: this.#toolbarHeight, x: 0, y: 0, width });\n\n    const heightoffset = this.#toolbarHeight;\n\n    const remainingBounds = {\n      x: 0,\n      y: heightoffset + 1,\n      width,\n      height: height - heightoffset,\n    };\n    if (!this.#mainView.isHidden) this.#mainView.setBounds(remainingBounds);\n    if (!this.activeReplayTab?.view?.isHidden) this.activeReplayTab.view.setBounds(remainingBounds);\n  }\n\n  private closeOpenPopup(): void {\n    try {\n      if (this.#showingPopupName) {\n        this.#childWindowsByName.get(this.#showingPopupName)?.close();\n        this.#childWindowsByName.delete(this.#showingPopupName);\n      }\n    } catch {}\n    this.#showingPopupName = undefined;\n  }\n\n  private onChromeAliveEvent<T extends keyof IChromeAliveSessionEvents>(\n    eventType: T,\n    data: IChromeAliveSessionEvents[T],\n  ): void {\n    if (eventType === 'Session.updated') {\n      const session = data as IChromeAliveSessionEvents['Session.updated'];\n      let scriptEntrypoint = session.scriptEntrypoint;\n      const divider = scriptEntrypoint.includes('/') ? '/' : '\\\\';\n      scriptEntrypoint = scriptEntrypoint.split(divider).slice(-2).join(divider);\n      const title = `${scriptEntrypoint} (${moment(session.startTime).format(\n        'MMM D [at] h:mm a',\n      )})`;\n      if (this.window.title !== title) {\n        this.window.setTitle(title);\n        void this.#toolbarView.webContents?.executeJavaScript(`document.title=\"${title}\"`);\n      }\n    }\n\n    if (eventType === 'Session.loaded' && !this.#hasShown) {\n      this.window.show();\n      this.#hasShown = true;\n    }\n\n    if (eventType === 'DevtoolsBackdoor.toggleInspectElementMode') {\n      this.activeReplayTab.view.webContents?.focus();\n    }\n\n    if (eventType === 'Session.tabCreated') {\n      const createdTab = data as IChromeAliveSessionEvents['Session.tabCreated'];\n      void this.addReplayTab(createdTab.tabId);\n    }\n\n    if (eventType === 'Session.appMode') {\n      const mode = (data as IChromeAliveSessionEvents['Session.appMode']).mode;\n      const isFinderPopup = this.#showingPopupName?.startsWith('MenuFinder') && mode === 'Finder';\n      if (!isFinderPopup) this.closeOpenPopup();\n      void this.activateView(mode);\n    }\n  }\n\n  private trackChildWindow(childWindow: BrowserWindow, details: { frameName: string }): void {\n    const { frameName } = details;\n    if (this.#childWindowsByName.has(frameName)) {\n      throw new Error(`Child window with the same frameName already exists: ${frameName}`);\n    }\n\n    this.#childWindowsByName.set(frameName, childWindow);\n    const onIpcMessage = this.#eventSubscriber.on(\n      childWindow.webContents,\n      'ipc-message',\n      (e, eventName, ...args) => {\n        if (eventName === 'chromealive:api') {\n          const [command, apiArgs] = args;\n          if (command === 'File:navigate') {\n            const { filepath } = apiArgs;\n            shell.showItemInFolder(filepath);\n          }\n        } else if (eventName === 'App:changeHeight') {\n          childWindow.setBounds({\n            height: Math.round(args[0]),\n          });\n        }\n      },\n    );\n\n    const onshow = this.#eventSubscriber.on(childWindow, 'show', () => {\n      if (this.#showingPopupName === frameName) return;\n      this.closeOpenPopup();\n      this.#showingPopupName = frameName;\n    });\n    let hasHandled = false;\n    childWindow.once('close', async e => {\n      this.#eventSubscriber.off(onshow, onIpcMessage);\n      if (this.#showingPopupName === frameName) this.#showingPopupName = undefined;\n      const popup = this.#childWindowsByName.get(frameName);\n      this.#childWindowsByName.delete(frameName);\n      if (!hasHandled && popup) {\n        hasHandled = true;\n        e.preventDefault();\n        await popup?.webContents.executeJavaScript(\n          'window.dispatchEvent(new CustomEvent(\"manual-close\"))',\n        );\n        try {\n          popup?.close();\n        } catch {}\n      }\n    });\n  }\n}\n","import { app, Rectangle, BrowserWindow } from 'electron';\nimport * as Path from 'path';\nimport * as Fs from 'fs';\nimport EventSubscriber from '@ulixee/commons/lib/EventSubscriber';\n\nexport default class WindowStateKeeper {\n  public windowState: Rectangle & { isMaximized?: boolean } = {\n    x: 0,\n    y: 0,\n    width: 1400,\n    height: 800,\n    isMaximized: false,\n  };\n\n  private readonly configPath: string;\n  private events = new EventSubscriber();\n\n  constructor(private windowName: string) {\n    this.configPath = Path.join(app.getPath('userData'), `${windowName}.json`);\n\n    if (Fs.existsSync(this.configPath)) {\n      try {\n        this.windowState = JSON.parse(Fs.readFileSync(this.configPath, 'utf8'));\n      } catch {}\n    }\n  }\n\n  public track(window: BrowserWindow): void {\n    this.events.on(window, 'resize', this.save.bind(this, window));\n    this.events.on(window, 'move', this.save.bind(this, window));\n    this.events.once(window, 'close', this.save.bind(this, window));\n    this.events.once(window, 'close', () => this.events.close());\n  }\n\n  save(window: BrowserWindow): void {\n    if (!this.windowState.isMaximized) {\n      this.windowState = window.getBounds();\n    }\n    this.windowState.isMaximized = window.isMaximized();\n    Fs.writeFileSync(this.configPath, JSON.stringify(this.windowState));\n  }\n}\n","import { app, BrowserWindow, WebContents, shell } from 'electron';\nimport * as Path from 'path';\nimport EventSubscriber from '@ulixee/commons/lib/EventSubscriber';\nimport { TypedEventEmitter } from '@ulixee/commons/lib/eventUtils';\nimport ApiManager from './ApiManager';\nimport generateContextMenu from '../menus/generateContextMenu';\nimport WindowStateKeeper from './util/windowStateKeeper';\nimport loadUrl from './util/loadUrl';\n\nexport default class DesktopWindow extends TypedEventEmitter<{\n  close: void;\n  focus: void;\n}> {\n  public get isOpen(): boolean {\n    return this.#window?.isVisible() ?? false;\n  }\n\n  public get isFocused(): boolean {\n    return this.#window?.isFocused() ?? false;\n  }\n\n  public get webContents(): WebContents | undefined {\n    return this.#window?.webContents;\n  }\n\n  #window?: BrowserWindow;\n  #events = new EventSubscriber();\n\n  #windowStateKeeper = new WindowStateKeeper('DesktopWindow');\n\n  constructor(private apiManager: ApiManager) {\n    super();\n    void this.open(false);\n  }\n\n  public focus(): void {\n    this.#window?.moveTop();\n  }\n\n  public async open(show = true): Promise<void> {\n    if (this.#window) {\n      if (show) {\n        this.#window.setAlwaysOnTop(true);\n        this.#window.show();\n        this.#window.setAlwaysOnTop(false);\n      }\n      return;\n    }\n    this.#window = new BrowserWindow({\n      show: false,\n      acceptFirstMouse: true,\n      useContentSize: true,\n      titleBarStyle: 'hiddenInset',\n      ...this.#windowStateKeeper.windowState,\n      webPreferences: {\n        preload: `${__dirname}/preload/desktop.js`,\n      },\n      icon: Path.resolve(app.getAppPath(), 'resources', 'icon.png'),\n    });\n\n    this.#windowStateKeeper.track(this.#window);\n    this.#window.setTitle('Ulixee Desktop');\n\n    this.#window.webContents.ipc.handle('desktop:api', async (e, { api, args }) => {\n      if (api === 'Argon.dragAsFile') {\n        return await this.apiManager.privateDesktopApiHandler.dragArgonsAsFile(args, e.sender);\n      }\n    });\n    this.#window.webContents.ipc.on('getPrivateApiHost', e => {\n      e.returnValue = this.apiManager.privateDesktopWsServerAddress;\n    });\n\n    this.#window.webContents.setWindowOpenHandler(details => {\n      void shell.openExternal(details.url);\n      return { action: 'deny' };\n    });\n\n    this.#events.on(this.#window.webContents, 'context-menu', (e, params) => {\n      if (this.#window?.webContents) generateContextMenu(params, this.#window.webContents).popup();\n    });\n    this.#events.on(this.#window, 'focus', this.emit.bind(this, 'focus'));\n    this.#events.on(this.#window, 'close', this.close.bind(this));\n\n    await loadUrl(this.#window.webContents, 'desktop.html');\n\n    if (show) {\n      this.#window.show();\n      this.#window.moveTop();\n    }\n  }\n\n  public close(e, force = false): void {\n    if (force) {\n      this.#events.close();\n      this.#window = undefined;\n    } else {\n      this.#window?.hide();\n      e.preventDefault();\n    }\n    this.emit('close');\n  }\n}\n","import { app, BrowserWindow, ipcMain, Menu, MenuItem, shell } from 'electron';\nimport ChromeAliveWindow from '../lib/ChromeAliveWindow';\nimport MenuItemConstructorOptions = Electron.MenuItemConstructorOptions;\nimport BaseWindow = Electron.BaseWindow;\n\nconst isMac = process.platform === 'darwin';\n\nexport default function generateAppMenu(loadedChromeAlive: ChromeAliveWindow | null): Menu {\n  const template: any = [\n    ...(isMac\n      ? [\n          {\n            label: app.name,\n            submenu: [\n              { role: 'about' },\n              { type: 'separator' },\n              { role: 'services' },\n              { type: 'separator' },\n              { role: 'hide' },\n              { role: 'hideothers' },\n              { role: 'unhide' },\n              { type: 'separator' },\n              { role: 'quit' },\n            ],\n          },\n        ]\n      : []),\n    {\n      label: 'File',\n      submenu: [\n        {\n          type: 'separator',\n        },\n        ...createMenuItem(\n          ['CmdOrCtrl+Shift+O'],\n          () => {\n            ipcMain.emit('open-file');\n          },\n          'Open Hero Session',\n        ),\n        {\n          type: 'separator',\n        },\n        isMac ? { role: 'close' } : { role: 'quit' },\n        {\n          type: 'separator',\n        },\n      ],\n    },\n    {\n      label: 'Edit',\n      submenu: [\n        { role: 'undo' },\n        { role: 'redo' },\n        { type: 'separator' },\n        { role: 'cut' },\n        { role: 'copy' },\n        { role: 'paste' },\n        ...(isMac\n          ? [\n              { role: 'pasteAndMatchStyle' },\n              { role: 'delete' },\n              { role: 'selectAll' },\n              { type: 'separator' },\n              {\n                label: 'Speech',\n                submenu: [{ role: 'startspeaking' }, { role: 'stopspeaking' }],\n              },\n            ]\n          : [{ role: 'delete' }, { type: 'separator' }, { role: 'selectAll' }]),\n      ],\n    },\n    {\n      label: 'View',\n      submenu: [\n        !loadedChromeAlive ? { role: 'reload' } : undefined,\n        { role: 'toggleDevTools' },\n        { type: 'separator' },\n        { role: 'resetZoom' },\n        { role: 'zoomIn' },\n        { role: 'zoomOut' },\n        { type: 'separator' },\n        { role: 'togglefullscreen' },\n      ].filter(Boolean),\n    },\n    {\n      label: 'Window',\n      submenu: [\n        { role: 'minimize' },\n        { role: 'zoom' },\n        ...(isMac\n          ? [{ type: 'separator' }, { role: 'front' }, { type: 'separator' }, { role: 'window' }]\n          : [{ role: 'close' }]),\n        { type: 'separator' },\n        {\n          label: 'Always on top',\n          type: 'checkbox',\n          checked: false,\n          click(menuItem: MenuItem, browserWindow: BrowserWindow) {\n            browserWindow.setAlwaysOnTop(!browserWindow.isAlwaysOnTop());\n            menuItem.checked = browserWindow.isAlwaysOnTop();\n          },\n        },\n      ],\n    },\n  ];\n  if (loadedChromeAlive) {\n    template.splice(template.length - 1, 0, {\n      label: 'Replay',\n      submenu: [\n        {\n          label: 'Open Database',\n          click: () => {\n            void shell.openPath(loadedChromeAlive.session.dbPath);\n          },\n        },\n        ...createMenuItem(['Left'], () => {\n          loadedChromeAlive.replayControl('back');\n        }),\n        ...createMenuItem(['Right'], () => {\n          loadedChromeAlive.replayControl('forward');\n        }),\n      ],\n    });\n  }\n\n  return Menu.buildFromTemplate(template);\n}\n\n// HELPER FUNCTIONS //////\n\nfunction createMenuItem(\n  shortcuts: string[],\n  action: (window: BaseWindow, menuItem: MenuItem, shortcutIndex: number) => void,\n  label: string = '',\n  enabled = true,\n): MenuItemConstructorOptions[] {\n  return shortcuts.map((shortcut, key) => ({\n    accelerator: shortcut,\n    visible: !!label && key === 0,\n    label: !!label && key === 0 ? label : '',\n    enabled,\n    click: (menuItem: MenuItem, browserWindow: BaseWindow | undefined, _) =>\n      action(browserWindow!, menuItem, key),\n  }));\n}\n","import { app, dialog, ipcMain, Menu } from 'electron';\nimport * as Path from 'path';\nimport EventSubscriber from '@ulixee/commons/lib/EventSubscriber';\nimport * as Os from 'os';\nimport IRegisteredEventListener from '@ulixee/commons/interfaces/IRegisteredEventListener';\nimport { INewHeroSessionEvent } from '@ulixee/desktop-interfaces/events/IDesktopAppEvents';\nimport ChromeAliveWindow from './ChromeAliveWindow';\nimport { Menubar } from './Menubar';\nimport ApiManager from './ApiManager';\nimport DesktopWindow from './DesktopWindow';\nimport generateAppMenu from '../menus/generateAppMenu';\nimport { IArgonFile } from './ArgonFile';\n\nexport class WindowManager {\n  get activeChromeAliveWindow(): ChromeAliveWindow {\n    return this.chromeAliveWindows[this.activeChromeAliveWindowIdx];\n  }\n\n  chromeAliveWindows: ChromeAliveWindow[] = [];\n  activeChromeAliveWindowIdx = 0;\n  readonly desktopWindow: DesktopWindow;\n  events = new EventSubscriber();\n\n  #chromeAliveWindowsBySessionId = new Map<string, ChromeAliveWindow>();\n\n  constructor(\n    private menuBar: Menubar,\n    private apiManager: ApiManager,\n  ) {\n    this.events.on(apiManager, 'new-cloud-address', this.onNewCloudAddress.bind(this));\n    this.events.on(apiManager, 'api-event', this.onApiEvent.bind(this));\n    this.events.on(apiManager, 'argon-file-opened', this.onArgonFileOpened.bind(this));\n\n    this.bindIpcEvents();\n    this.desktopWindow = new DesktopWindow(apiManager);\n    this.events.on(this.desktopWindow, 'close', this.checkOpenWindows.bind(this));\n    this.events.on(this.desktopWindow, 'focus', this.setMenu.bind(this));\n    this.events.on(\n      apiManager.privateDesktopApiHandler,\n      'open-replay',\n      this.loadChromeAliveWindow.bind(this),\n    );\n  }\n\n  public async openDesktop(): Promise<void> {\n    await app.dock?.show();\n    this.setMenu();\n    await this.desktopWindow.open();\n  }\n\n  public close(): void {\n    this.events.close();\n  }\n\n  public async loadChromeAliveWindow(data: {\n    cloudAddress: string;\n    heroSessionId: string;\n    dbPath: string;\n  }): Promise<void> {\n    if (this.#chromeAliveWindowsBySessionId.has(data.heroSessionId)) {\n      this.#chromeAliveWindowsBySessionId.get(data.heroSessionId)?.window.focus();\n      return;\n    }\n    await app.dock?.show();\n    const chromeAliveWindow = new ChromeAliveWindow(data, data.cloudAddress);\n\n    const { heroSessionId } = data;\n    this.chromeAliveWindows.push(chromeAliveWindow);\n    this.#chromeAliveWindowsBySessionId.set(heroSessionId, chromeAliveWindow);\n    await chromeAliveWindow\n      .load()\n      .catch(err => console.error('Error Loading ChromeAlive window', err));\n\n    const focusEvent = this.events.on(\n      chromeAliveWindow.window,\n      'focus',\n      this.focusWindow.bind(this, heroSessionId),\n    );\n    this.events.once(\n      chromeAliveWindow.window,\n      'close',\n      this.closeWindow.bind(this, heroSessionId, focusEvent),\n    );\n    this.setMenu();\n  }\n\n  public async pickHeroSession(): Promise<void> {\n    const result = await dialog.showOpenDialog({\n      properties: ['openFile', 'showHiddenFiles'],\n      defaultPath: Path.join(Os.tmpdir(), '.ulixee', 'hero-sessions'),\n      filters: [\n        // { name: 'All Files', extensions: ['js', 'ts', 'db'] },\n        { name: 'Session Database', extensions: ['db'] },\n        // { name: 'Javascript', extensions: ['js'] },\n        // { name: 'Typescript', extensions: ['ts'] },\n      ],\n    });\n    if (result.filePaths.length) {\n      const [filename] = result.filePaths;\n      if (filename.endsWith('.db')) {\n        return this.loadChromeAliveWindow({\n          cloudAddress: this.apiManager.localCloudAddress!,\n          dbPath: filename,\n          heroSessionId: Path.basename(filename).replace('.db', ''),\n        });\n      }\n      // const sessionContainerDir = Path.dirname(filename);\n      // TODO: show relevant sessions\n    }\n  }\n\n  private async onArgonFileOpened(file: IArgonFile): Promise<void> {\n    await this.openDesktop();\n    await this.apiManager.privateDesktopApiHandler.onArgonFileOpened(file);\n  }\n\n  private setMenu(): void {\n    if (this.desktopWindow.isFocused) {\n      Menu.setApplicationMenu(generateAppMenu(null));\n    } else {\n      Menu.setApplicationMenu(generateAppMenu(this.activeChromeAliveWindow));\n    }\n  }\n\n  private onApiEvent(event: ApiManager['EventTypes']['api-event']): void {\n    if (event.eventType === 'Session.opened') {\n      void this.loadChromeAliveWindow({\n        ...(event.data as INewHeroSessionEvent),\n        cloudAddress: event.cloudAddress,\n      });\n    }\n  }\n\n  private async onNewCloudAddress(\n    event: ApiManager['EventTypes']['new-cloud-address'],\n  ): Promise<void> {\n    const { oldAddress, address } = event;\n    if (!oldAddress) return;\n\n    for (const window of this.chromeAliveWindows) {\n      if (window.api?.address.startsWith(oldAddress)) {\n        await window.reconnect(address);\n      }\n    }\n  }\n\n  private bindIpcEvents(): void {\n    ipcMain.on('open-file', this.pickHeroSession.bind(this));\n  }\n\n  private closeWindow(\n    heroSessionId: string,\n    ...eventsToUnregister: IRegisteredEventListener[]\n  ): void {\n    const chromeAliveWindow = this.#chromeAliveWindowsBySessionId.get(heroSessionId);\n    if (!chromeAliveWindow) return;\n    this.#chromeAliveWindowsBySessionId.delete(heroSessionId);\n    this.events.off(...eventsToUnregister);\n    const idx = this.chromeAliveWindows.indexOf(chromeAliveWindow);\n    if (idx === this.activeChromeAliveWindowIdx) {\n      this.activeChromeAliveWindowIdx = 0;\n    }\n    this.chromeAliveWindows.splice(idx, 1);\n    this.checkOpenWindows();\n    this.setMenu();\n  }\n\n  private checkOpenWindows(): void {\n    if (this.chromeAliveWindows.length === 0 && !this.desktopWindow.isOpen) {\n      app.dock?.hide();\n    }\n  }\n\n  private focusWindow(heroSessionId: string): void {\n    const chromeAliveWindow = this.#chromeAliveWindowsBySessionId.get(heroSessionId);\n    if (chromeAliveWindow)\n      this.activeChromeAliveWindowIdx = this.chromeAliveWindows.indexOf(chromeAliveWindow);\n    this.setMenu();\n  }\n}\n","import { app, BrowserWindow, Event, shell, Tray } from 'electron';\nimport log from 'electron-log';\nimport { autoUpdater, ProgressInfo, UpdateInfo } from 'electron-updater';\nimport { EventEmitter } from 'events';\nimport * as Path from 'path';\nimport { version } from '..';\nimport IMenubarOptions from '../interfaces/IMenubarOptions';\nimport { ARGON_FILE_EXTENSION } from '@ulixee/platform-specification/types/IArgonFile';\nimport ApiManager from './ApiManager';\nimport installDefaultChrome from './util/installDefaultChrome';\nimport loadUrl from './util/loadUrl';\nimport trayPositioner from './util/trayPositioner';\nimport { WindowManager } from './WindowManager';\n\nconst iconPath = Path.resolve(app.getAppPath(), 'resources', 'IconTemplate.png');\n\nexport class Menubar extends EventEmitter {\n  #tray?: Tray;\n  #menuWindow?: BrowserWindow;\n  #blurTimeout: NodeJS.Timeout | undefined; // track blur events with timeout\n  #windowManager?: WindowManager;\n  #isClosing = false;\n  #updateInfoPromise?: Promise<UpdateInfo | null>;\n  #installUpdateOnExit = false;\n  #downloadProgress = 0;\n  #apiManager?: ApiManager;\n\n  #argonFileOpen?: string;\n  #options: IMenubarOptions;\n  #trayMouseover?: boolean;\n\n  constructor(options: IMenubarOptions) {\n    super();\n    this.#options = options;\n\n    if (!app.requestSingleInstanceLock()) {\n      app.quit();\n      return;\n    }\n\n    // hide the dock icon if it shows\n    if (process.platform === 'darwin') {\n      app.setActivationPolicy('accessory');\n    }\n    app.on('second-instance', this.onSecondInstance.bind(this));\n    app.on('open-file', this.onFileOpened.bind(this));\n    app.setAppLogsPath();\n    (process.env as any).ELECTRON_DISABLE_SECURITY_WARNINGS = true;\n    void this.appReady();\n  }\n\n  get tray(): Tray {\n    if (!this.#tray)\n      throw new Error('Please access `this.tray` after the `ready` event has fired.');\n    return this.#tray;\n  }\n\n  private bindSignals(): void {\n    let didRun = false;\n    const exit = (): Promise<void> => {\n      if (didRun) return Promise.resolve();\n      didRun = true;\n      return this.appExit();\n    };\n    process.once('beforeExit', exit);\n    process.once('exit' as any, exit);\n    process.once('SIGTERM', exit);\n    process.once('SIGINT', exit);\n    process.once('SIGQUIT', exit);\n  }\n\n  private hideMenu(): void {\n    if (this.#blurTimeout) {\n      clearTimeout(this.#blurTimeout);\n      this.#blurTimeout = undefined;\n    }\n    try {\n      if (!this.#menuWindow?.isDestroyed()) {\n        this.#menuWindow?.hide();\n      }\n    } catch (error) {\n      if (!String(error).includes('Object has been destroyed')) throw error;\n    }\n  }\n\n  private onSecondInstance(_, argv: string[]): void {\n    const argonFile = argv.find(x => x.endsWith(`.${ARGON_FILE_EXTENSION}`));\n    if (argonFile) {\n      this.handleArgonFile(argonFile);\n    }\n  }\n\n  private handleArgonFile(path: string): void {\n    if (!path.endsWith(`.${ARGON_FILE_EXTENSION}`)) return;\n\n    if (this.#apiManager) {\n      void this.#apiManager.onArgonFileOpened(path);\n    } else {\n      this.#argonFileOpen = path;\n    }\n  }\n\n  private onFileOpened(e: Event, path: string): void {\n    if (!path.endsWith(`.${ARGON_FILE_EXTENSION}`)) return;\n\n    e.preventDefault();\n    this.handleArgonFile(path);\n  }\n\n  private async showMenu(trayPos?: Electron.Rectangle): Promise<void> {\n    if (!this.#tray) {\n      throw new Error('Tray should have been instantiated by now');\n    }\n\n    if (!this.#menuWindow) {\n      await this.createWindow();\n    }\n\n    // Use guard for TypeScript, to avoid ! everywhere\n    if (!this.#menuWindow) {\n      throw new Error('Window has been initialized just above. qed.');\n    }\n\n    if (trayPos) trayPositioner.alignTrayMenu(this.#menuWindow, trayPos);\n    this.#menuWindow.show();\n    this.#menuWindow.focus();\n    this.#menuWindow.on('blur', this.checkHideMenu.bind(this));\n  }\n\n  private async beforeQuit(): Promise<void> {\n    if (this.#isClosing) return;\n    this.#isClosing = true;\n    console.warn('Quitting Ulixee Menubar');\n    this.#tray?.removeAllListeners();\n    this.hideMenu();\n    await this.#apiManager?.close();\n    this.#windowManager?.close();\n    if (this.#installUpdateOnExit) {\n      await this.#updateInfoPromise;\n      await autoUpdater.quitAndInstall(false, true);\n    }\n  }\n\n  private async appExit(): Promise<void> {\n    await this.beforeQuit();\n    app.exit();\n  }\n\n  private async appReady(): Promise<void> {\n    try {\n      await app.whenReady();\n      // for now auto-start\n      this.#apiManager = new ApiManager();\n      this.#windowManager = new WindowManager(this, this.#apiManager);\n      await this.#apiManager.start();\n      this.bindSignals();\n      if (this.#argonFileOpen) {\n        await this.#apiManager.onArgonFileOpened(this.#argonFileOpen);\n        this.#argonFileOpen = undefined;\n      }\n      await this.updateLocalCloudStatus();\n\n      await this.createWindow();\n\n      this.#tray = new Tray(iconPath);\n\n      app.on('activate', () => {\n        if (!this.#windowManager?.desktopWindow.isOpen) {\n          this.#windowManager!.desktopWindow.focus();\n        }\n      });\n\n      this.#tray.on('click', this.clicked.bind(this));\n      this.#tray.on('mouse-leave', this.leaveTray.bind(this));\n      this.#tray.on('mouse-enter', this.enterTray.bind(this));\n      this.#tray.on('right-click', this.rightClicked.bind(this));\n      this.#tray.on('drop-files', this.onDropFiles.bind(this));\n      this.#tray.setToolTip(this.#options.tooltip || '');\n      app.dock?.hide();\n\n      this.emit('ready');\n\n      this.initUpdater();\n      await installDefaultChrome();\n    } catch (error) {\n      console.error('ERROR in appReady: ', error);\n      await this.appExit();\n    }\n  }\n\n  private checkHideMenu(): void {\n    if (!this.#trayMouseover) {\n      this.hideMenu();\n    }\n  }\n\n  private enterTray(): void {\n    this.#trayMouseover = true;\n  }\n\n  private leaveTray(): void {\n    this.#trayMouseover = false;\n    if (!this.#menuWindow?.isFocused()) {\n      this.hideMenu();\n    }\n  }\n\n  private initUpdater(): void {\n    try {\n      autoUpdater.logger = null;\n      autoUpdater.autoDownload = true;\n      autoUpdater.autoInstallOnAppQuit = false;\n      autoUpdater.allowDowngrade = true;\n      autoUpdater.allowPrerelease = version.includes('alpha');\n      autoUpdater.on('update-not-available', this.noUpdateAvailable.bind(this));\n      autoUpdater.on('update-available', this.onUpdateAvailable.bind(this));\n      autoUpdater.signals.progress(this.onDownloadProgress.bind(this));\n    } catch (error) {\n      log.error('Error initializing AutoUpdater', { error });\n    }\n  }\n\n  private async noUpdateAvailable(): Promise<void> {\n    log.verbose('No new Ulixee.app versions available');\n    await this.sendToFrontend('Version.onLatest', {});\n  }\n\n  private async onUpdateAvailable(update: UpdateInfo): Promise<void> {\n    log.info('New Ulixee.app version available', update);\n    this.#updateInfoPromise = Promise.resolve(update);\n    await this.sendToFrontend('Version.available', {\n      version: update.version,\n    });\n  }\n\n  private async onDownloadProgress(progress: ProgressInfo): Promise<void> {\n    log.verbose('New version download progress', progress);\n    this.#downloadProgress = Math.round(progress.percent);\n    await this.sendToFrontend('Version.download', {\n      progress: this.#downloadProgress,\n    });\n  }\n\n  private async versionCheck(): Promise<void> {\n    if (await this.#updateInfoPromise) return;\n    if (autoUpdater.isUpdaterActive()) return;\n    try {\n      log.verbose('Checking for version update');\n      this.#updateInfoPromise = autoUpdater.checkForUpdates().then(x => x?.updateInfo ?? null);\n      await this.#updateInfoPromise;\n    } catch (error) {\n      log.error('ERROR checking for new version', error);\n    }\n  }\n\n  private async versionInstall(): Promise<void> {\n    log.verbose('Installing version', {\n      progress: this.#downloadProgress,\n      update: await this.#updateInfoPromise,\n    });\n    this.#installUpdateOnExit = true;\n    await this.sendToFrontend('Version.installing', {});\n    if (this.#downloadProgress < 100) await autoUpdater.downloadUpdate();\n    autoUpdater.quitAndInstall(false, true);\n  }\n\n  private async clicked(): Promise<void> {\n    if (this.#menuWindow?.isVisible()) {\n      this.hideMenu();\n    }\n\n    await this.#windowManager?.openDesktop();\n    await this.checkForUpdates();\n  }\n\n  private async rightClicked(\n    event?: Electron.KeyboardEvent,\n    bounds?: Electron.Rectangle,\n  ): Promise<void> {\n    if (event && (event.shiftKey || event.ctrlKey || event.metaKey)) {\n      return this.hideMenu();\n    }\n\n    // if blur was invoked clear timeout\n    if (this.#blurTimeout) {\n      clearInterval(this.#blurTimeout);\n      this.#blurTimeout = undefined;\n    }\n\n    if (this.#menuWindow?.isVisible()) {\n      return this.hideMenu();\n    }\n\n    await this.showMenu(bounds);\n    await this.checkForUpdates();\n  }\n\n  private onDropFiles(_, files: string[]): void {\n    for (const file of files) {\n      if (file.endsWith(ARGON_FILE_EXTENSION)) this.handleArgonFile(file);\n    }\n  }\n\n  private async checkForUpdates(): Promise<void> {\n    try {\n      if (!this.#updateInfoPromise) {\n        this.#updateInfoPromise = autoUpdater\n          .checkForUpdatesAndNotify()\n          .then(x => x?.updateInfo ?? null);\n        await this.#updateInfoPromise;\n      }\n    } catch (error) {\n      log.error('ERROR checking for new version', error);\n    }\n  }\n\n  private async createWindow(): Promise<void> {\n    const defaults = {\n      show: false, // Don't show it at first\n      frame: false, // Remove window frame\n      width: this.#options.width,\n      height: this.#options.height,\n    };\n\n    this.#menuWindow = new BrowserWindow({\n      ...defaults,\n      roundedCorners: true,\n      skipTaskbar: true,\n      autoHideMenuBar: true,\n      transparent: false,\n      alwaysOnTop: true,\n      useContentSize: true,\n      webPreferences: {\n        javascript: true,\n        preload: `${__dirname}/preload/menubar.js`,\n      },\n    });\n\n    this.#menuWindow.on('blur', () => {\n      if (!this.#menuWindow || this.#isClosing) {\n        return;\n      }\n      this.#blurTimeout = setTimeout(() => this.hideMenu(), 100);\n    });\n    this.#menuWindow.on('focus', () => {\n      clearTimeout(this.#blurTimeout);\n      this.#blurTimeout = undefined;\n    });\n\n    this.#menuWindow.setVisibleOnAllWorkspaces(true);\n    this.#menuWindow.on('close', this.windowClear.bind(this));\n    this.#menuWindow.webContents.on('ipc-message', async (e, message, ...args) => {\n      if (message === 'desktop:api') {\n        const [api] = args;\n\n        if (api === 'mousedown') {\n          this.hideMenu();\n        }\n\n        if (api === 'App.quit') {\n          await this.appExit();\n        }\n\n        if (api === 'App.openLogsDirectory') {\n          await shell.openPath(Path.dirname(log.transports.file.getFile().path));\n        }\n\n        if (api === 'App.openDataDirectory') {\n          if (this.#apiManager?.localCloud) {\n            await shell.openPath(this.#apiManager.localCloud.datastoreCore.options.datastoresDir);\n          }\n        }\n\n        if (api === 'App.openHeroSession') {\n          await this.#windowManager?.pickHeroSession();\n        }\n\n        if (api === 'App.openDesktop') {\n          await this.#windowManager?.openDesktop();\n        }\n\n        if (api === 'Cloud.stop' || api === 'Cloud.restart') {\n          await this.stopCloud();\n        }\n\n        if (api === 'Cloud.start' || api === 'Cloud.restart') {\n          await this.startCloud();\n        }\n\n        if (api === 'Cloud.getStatus') {\n          await this.updateLocalCloudStatus();\n        }\n\n        if (api === 'Version.check') {\n          await this.versionCheck();\n        }\n\n        if (api === 'Version.install') {\n          await this.versionInstall();\n        }\n      }\n    });\n\n    await loadUrl(this.#menuWindow.webContents, `menubar.html`);\n    if (process.env.OPEN_DEVTOOLS) {\n      this.#menuWindow.webContents.openDevTools({ mode: 'detach' });\n    }\n    if (this.#apiManager?.localCloud) {\n      await this.updateLocalCloudStatus();\n    }\n  }\n\n  private windowClear(): void {\n    this.#menuWindow = undefined;\n  }\n\n  /// //// CLOUD MANAGEMENT ////////////////////////////////////////////////////////////////////////////////////////////\n\n  private async stopCloud(): Promise<void> {\n    if (!this.#apiManager || !this.#apiManager?.localCloud) return;\n\n    // eslint-disable-next-line no-console\n    console.log(`CLOSING ULIXEE CLOUD`);\n    await this.#apiManager.stopLocalCloud();\n    await this.updateLocalCloudStatus();\n  }\n\n  private async startCloud(): Promise<void> {\n    if (!this.#apiManager) return;\n    await this.#apiManager.startLocalCloud();\n\n    // eslint-disable-next-line no-console\n    console.log(`STARTED ULIXEE CLOUD at ${await this.#apiManager.localCloud!.address}`);\n    await this.updateLocalCloudStatus();\n  }\n\n  private async updateLocalCloudStatus(): Promise<void> {\n    if (this.#isClosing || !this.#apiManager) return;\n    let address: string | undefined;\n    if (this.#apiManager.localCloud) {\n      address = await this.#apiManager.localCloud.address;\n    }\n    await this.sendToFrontend('Cloud.status', {\n      started: !!this.#apiManager.localCloud,\n      address,\n    });\n  }\n\n  private async sendToFrontend(eventType: string, data: any): Promise<void> {\n    if (this.#menuWindow) {\n      const json = { detail: { eventType, data } };\n      await this.#menuWindow.webContents.executeJavaScript(`(()=>{\n      const evt = ${JSON.stringify(json)};\n      document.dispatchEvent(new CustomEvent('desktop:event', evt));\n    })()`);\n    }\n  }\n}\n","import './lib/util/defaultEnvVars';\nimport './lib/util/UlixeeLogger';\nimport '@ulixee/commons/lib/SourceMapSupport';\nimport UlixeeConfig from '@ulixee/commons/config';\nimport { app } from 'electron';\nimport { loadEnv } from '@ulixee/commons/lib/envUtils';\nimport { Menubar } from './lib/Menubar';\nimport { version } from '../../package.json';\n\nprocess.env.ELECTRON_DISABLE_SECURITY_WARNINGS = 'true';\nprocess.env.DEVTOOLS_PORT ??= '8315';\nloadEnv(UlixeeConfig.global.directoryPath);\n\napp.commandLine.appendSwitch('remote-debugging-port', process.env.DEVTOOLS_PORT);\n\nconst menubar = new Menubar({\n  width: 300,\n  height: 300,\n  tooltip: 'Ulixee',\n});\n\nmenubar.on('ready', () => {\n  // eslint-disable-next-line no-console\n  console.log('RUNNING ULIXEE DESKTOP', version);\n});\n\nconst root = __dirname;\n\nexport { root, version };\n"],"names":["app","log","Log","module","Path","translateToPrintable","loggerSessionIdNames","inspect","injectLogger","Logger","TypedEventEmitter","EventSubscriber","Queue","Env","MainchainClient","localchain","Localchain","Identity","BrokerChannelHoldSource","LocalchainWithSync","DatastoreLookup","ArgonUtils","gettersToObject","ArgonFileSchema","ARGON_FILE_EXTENSION","serdeJson","toUrl","WsTransportToCore","ConnectionToCore","existsAsync","Fs","readFileAsJson","ValidationError","UlixeeConfig","_a","Error","types","Resolvable","WsTransportToClient","ConnectionToClient","Os","version","nanoid","DatastoreApiClient","DatastoreManifest","CreditReserver","ARGON_FILE_VERSION","Menu","dialog","getDataDirectory","cloud","DatastoreApiClients","LocalUserProfile","QueryLog","WebSocket","DefaultPaymentService","UlixeeHostsConfig","_b","CloudNode","ArgonPaymentProcessor","screen","events","http","defaultBrowserEngine","clipboard","nativeImage","BrowserView","bindFunctions","BrowserWindow","MenuItem","HeroCore","data","moment","shell","ipcMain","EventEmitter","autoUpdater","Tray","loadEnv"],"mappings":"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"}